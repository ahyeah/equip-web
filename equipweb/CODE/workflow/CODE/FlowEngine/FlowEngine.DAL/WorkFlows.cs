///////////////////////////////////////////////////////////
//  WorkFlows.cs
//  Implementation of the Class WorkFlows
//  Generated by Enterprise Architect
//  Created on:      13-11月-2015 14:52:16
//  Original author: Chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.IO;
using FlowEngine.Modals;
using System.Diagnostics;
using System.Text.RegularExpressions;



namespace FlowEngine.DAL {
    public class WorkFlows : BaseDAO
    {

        public WorkFlows()
        {

        }

        ~WorkFlows()
        {

        }

        /// <summary>
        /// 获得数据库中所以的工作流定义
        /// </summary>
        public List<WorkFlow_Define> GetAllWorkFlows()
        {

            using (var db = base.NewDB())
            {
                return db.workflow_define.ToList();
            }
        }

        /// <summary>
        /// 获得wf_name的工作流的所有实例
        /// </summary>
        /// <param name="wf_id"></param>
        public List<WorkFlow_Entity> GetWorkFlowEntities(int wf_id)
        {

            using (var db = base.NewDB())
            {
                return db.workflow_entities.Where(a => a.WE_Wref.W_ID == wf_id).ToList();
            }
        }
        public List<WorkFlow_Entity> GetWorkFlowEntitiesbySer(string serial)
        {
            using (var db = base.NewDB())
            {
                return db.workflow_entities.Where(s => s.WE_Ser == serial).ToList();
            }
        }
        //fhp添加的方法开始-----
        public WorkFlow_Entity GetMainWorkFlowEntity(string wfe_ser)
        {

            using (var db = base.NewDB())
            {
                return db.workflow_entities.Where(a => a.WE_Ser == wfe_ser).OrderBy(a => a.WE_Id).First();
            }
        }
        //fhp添加方法结束---
        /// <summary>
        /// 获得处于Active状态的工作流实体
        /// </summary>
        /// <param name="wf_id"></param>
        public List<WorkFlow_Entity> GetActiveWorkFlowEntities(string Entity_name)
        {
            //&& a.WE_Wref.W_Name == "A13dot1"
            using (var db = base.NewDB())
            {
                if (Entity_name == "ALL")
                    return db.workflow_entities.Where(a => a.WE_Status == WE_STATUS.ACTIVE).ToList();
                else
                    return db.workflow_entities.Where(a => a.WE_Status == WE_STATUS.ACTIVE && a.WE_Wref.W_Name == Entity_name).ToList();
            }
        }

        /// <summary>
        /// 获得工作流实体的名称
        /// </summary>
        /// <param name="wf_id"></param>
        public string GetWorkFlowEntityName(int wfe_id)
        {

            using (var db = base.NewDB())
            {
                WorkFlow_Entity we = db.workflow_entities.Where(a => a.WE_Id == wfe_id).First();
                if (we == null)
                    return "";

                return we.WE_Wref.W_Name;
            }
        }

        /// <summary>
        /// 获得工作流实体的描述信息
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public string GetWorkFlowEntityDesc(int wfe_id)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity we = db.workflow_entities.Where(a => a.WE_Id == wfe_id).First();
                if (we == null)
                    return "";

                return we.WE_Wref.W_Attribution;
            }
        }

        /// <summary>
        /// 依据工作流实体id查找工作流实体
        /// </summary>
        /// <param name="we_id"></param>
        public WorkFlow_Entity GetWorkFlowEntity(int we_id)
        {

            using (var db = base.NewDB())
            {
                return db.workflow_entities.Where(a => a.WE_Id == we_id).First();
            }
        }

        public WorkFlow_Define GetWorkFlowDefine(string wf_name)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Define wd = db.workflow_define.Where(s => s.W_Name == wf_name).First();
                return wd;
            }
        }

        //通过工作流定义ID获得工作流的定义
        public WorkFlow_Define GetWorkFlowDefineByID(int defineID)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    return db.workflow_define.Where(a => a.W_ID == defineID).First();
                }
            }
            catch(Exception e)
            {

                return null;
            }
        }

        //获得工作流实体 wfe_id 的define
        public WorkFlow_Define GetWorkFlowDefine(int wfe_id)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    WorkFlow_Define wd = db.workflow_entities.Where(s => s.WE_Id == wfe_id).First().WE_Wref;
                    return wd;
                }
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// 更新工作流实体的属性
        /// </summary>
        /// <param name="wfe_id">工作流实体ID</param>
        /// <param name="property_name">属性名</param>
        /// <param name="value">值</param>
        /// <returns></returns>
        public bool UpdateWorkFlowEntity(int wfe_id, string property_name, object value)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    var wfe = db.workflow_entities.Where(a => a.WE_Id == wfe_id).First();
                    switch(property_name)
                    {
                        case "WE_Ser":
                            if (value.GetType().Name != "string")
                                throw new Exception("Error type");
                            wfe.WE_Ser = (string)value;
                            break;

                        case "WE_Status":
                            if (value.GetType().Name != "WE_STATUS")
                                throw new Exception("Error type");
                            wfe.WE_Status = (WE_STATUS)value;
                            break;

                        case "WE_Binary":
                            if (value.GetType().Name != "byte[]")
                                throw new Exception("Error type");
                            wfe.WE_Binary = (byte[])value;
                            break;

                        default:
                            throw new Exception("Unkown property or Error property or unchangeable property");
                            
                            
                    }
                    if (db.SaveChanges() >= 1)
                        return true;
                    else
                        return false;
                }
            }
            catch
            {
                return false;
            }
        }

        public bool SaveWorkFlowEntity(WorkFlow_Entity we)
        {
            using (var db = base.NewDB())
            {                
                var wfe = db.workflow_entities.Where(a => a.WE_Id == we.WE_Id).First();
                if (we.WE_Status != WE_STATUS.INVALID) //不更新状态
                    wfe.WE_Status = we.WE_Status;
                wfe.WE_Binary = we.WE_Binary;
                wfe.Last_Trans_Time = we.Last_Trans_Time;
                if (db.SaveChanges() >= 1)
                    return true;
            }
            return false;
        }

        /// <summary>
        /// 针对同时添加实体会导致串号异常，因此定义insert lock 对象
        /// </summary>
        private static object insert_lock = new object();
        public bool AddWorkEntity(string wfName, WorkFlow_Entity we)
        {
            int num = 0;
            lock (insert_lock)
            { //locked
                using (var db = base.NewDB())
                {
                    WorkFlow_Define wd = db.workflow_define.Where(s => s.W_Name == wfName).First();
                    if (we.WE_Ser == "") //2012/2/12--保证子工作流串号与父工作流相同
                    {
                        //对WorkFlow_Entity编号的处理
                        string perFix = DateTime.Now.ToString("yyyyMM");
                        IQueryable<WorkFlow_Entity> we_Ser = db.workflow_entities.Where(s => s.WE_Ser.StartsWith(perFix)).OrderBy(s => s.WE_Ser);
                        if (we_Ser.ToList().Count == 0)
                            we.WE_Ser = perFix + "00001";
                        else
                        {

                            we.WE_Ser = (Convert.ToInt64(we_Ser.ToList().Last().WE_Ser) + 1).ToString();
                        }
                    }


                    if (wd == null)
                        return false;

                    wd.W_Wentities.Add(we);

                  //System.Threading.Thread.Sleep(2000);

                    num = db.SaveChanges();
                    //return (db.SaveChanges() != 0);

                }
            }//unlocked
            return (num != 0);
        }

        /// <summary>
        /// 获得任务实体的第一任务
        /// </summary>
        /// <param name="wfEntityId"></param>
        /// <returns></returns>
        public Mission GetWFEntityFirstMission(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe == null)
                    return null;

                return wfe.Process_Info.Where(s => s.pre_Mission == null).First();
            }
        }

        /// <summary>
        /// 删除工作流实体
        /// </summary>
        /// <param name="wfEntityId"></param>
        public void DeleteWFEntity(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe != null)
                {
                    wfe.Process_Info.Clear();
                    db.workflow_entities.Remove(wfe);
                }
                db.SaveChanges();
            }
        }

        /// <summary>
        /// 置工作流实体为删除状态――注意对比与DeleteWFEntity的区别
        /// </summary>
        /// <param name="wfEntityId"></param>
        public void SetWFEntityDeleted(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe != null)
                {
                    wfe.WE_Status = WE_STATUS.DELETED;
                }
                db.SaveChanges();
            }
        }

        /// <summary>
        /// 获得任务实体的最后一个任务
        /// </summary>
        /// <param name="wfEntityId"></param>
        /// <returns></returns>
        public Mission GetWFEntityLastMission(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe == null)
                    return null;

                return wfe.Process_Info.Where(s => s.next_Mission.Count == 0).First();
            }
        }

        /// <summary>
        /// 获得任务实体的所有已执行完的任务，以任务的顺序排列
        /// </summary>
        /// <param name="wfEntityId"></param>
        /// <returns></returns>
        public List<Mission> GetWFEntityMissions(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                List<Mission> missions = new List<Mission>();

                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();

                if (wfe != null)
                {
                    Mission miss = wfe.Process_Info.Where(s => s.pre_Mission == null).First();
                    if (miss != null)
                    {
                        missions.Add(miss);

                        while (miss.next_Mission.Count != 0)
                        {
                            missions.Add(miss.next_Mission.First());
                            miss = (Mission)miss.next_Mission.First();
                        }
                    }
                }

                return missions;
            }
        }

        /// <summary>
        /// 添加一条任务记录到数据库
        /// </summary>
        /// <param name="wfEntityId">工作流实体的ID</param>
        /// <param name="miss">新任务</param>        
        /// <returns>操作成功返回true,否则返回false</returns>
        public bool AddMissionRecord(int wfEntityId, Mission miss)
        {
            using (var db = base.NewDB())
            {
                //查找wfEntityId的工作流实体
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe == null)
                    return false;

                if (wfe.Process_Info.Count == 0)
                {
                    miss.next_Mission = null;
                    miss.pre_Mission = null;
                    wfe.Process_Info.Add(miss);
                }
                else
                {
                    Mission last = wfe.Process_Info.Where(s => s.next_Mission.Count == 0).First();
                    miss.pre_Mission = last;
                    miss.Miss_WFentity = wfe;
                    last.next_Mission.Add(miss);
                }
                return (db.SaveChanges() != 0);
            }
        }

        /// <summary>
        /// 为一个任务添加参数
        /// </summary>
        /// <param name="missId">任务的ID</param>
        /// <param name="pars">参数列表</param>
        /// <returns>操作成功返回true, 否则返回false</returns>
        public bool LinkParamsToMiss(int missId, List<Mission_Param> pars)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();
                if (miss == null)
                    return false;

                foreach (Mission_Param mpar in pars)
                {
                    miss.Params_Info.Add(mpar);
                }
                return (db.SaveChanges() != 0);
            }
        }

        /// <summary>
        /// 为一个任务添加Record信息
        /// </summary>
        /// <param name="missId">任务的ID</param>
        /// <param name="pRecords">Record信息</param>
        /// <returns>操作成功返回true, 否则返回false</returns>
        public bool LinkRecordInfoToMiss(int missId, List<Process_Record> pRecords)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();
                if (miss == null)
                    return false;

                foreach (Process_Record pr in pRecords)
                {
                    miss.Record_Info.Add(pr);
                }
                return (db.SaveChanges() != 0);
            }
        }

        /// <summary>
        /// 获取某一任务的Record信息
        /// </summary>
        /// <param name="missId">任务的ID</param>
        /// <returns>Mission的Record列表</returns>
        public List<Process_Record> GetMissionRecordInfo(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.Record_Info.ToList();
            }

        }

        /// <summary>
        /// 获取某一任务的参数
        /// </summary>
        /// <param name="missId"></param>
        /// <returns>Mission的参数列表</returns>
        public List<Mission_Param> GetMissParams(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.Params_Info.ToList();
            }
        }

        /// <summary>
        /// 获取某一个任务的前一个任务
        /// </summary>
        /// <param name="missId"></param>
        /// <returns></returns>
        public Mission GetPreMission(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.pre_Mission;
            }
        }

        /// <summary>
        /// 获取某一个任务的前一个任务
        /// </summary>
        /// <param name="missId"></param>
        /// <returns></returns>
        public Mission GetNextMission(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.next_Mission.First();
            }
        }

        public List<WorkFlow_Entity> GetWFEntityByConditon(Func<WorkFlow_Entity, bool> condition)
        {
            using (var db = base.NewDB())
            {
                try
                {
                    db.workflow_entities.Where(s => s.Process_Info.Count(t => t.Miss_Id == 1) == 0);
                    return db.workflow_entities.Where(condition).ToList();
                }
                catch (Exception e)
                {
                    return null;
                }
            }
        }

        /// <summary>
        /// 获得某个工作流完成需要的步骤
        /// </summary>
        /// <param name="wf_name"></param>
        /// <returns></returns>
        public int GetWFAvgSteps(string wf_name)
        {
            using (var db = base.NewDB())
            {
                var workflow = db.workflow_define.Where(s => s.W_Name == wf_name).First();
                var wfEntities = workflow.W_Wentities.Where(s => s.WE_Status == WE_STATUS.DONE);
                if (wfEntities.ToList().Count == 0)
                    return 0;

                double steps = wfEntities.Average(s => s.Process_Info.Count);
                return (int)steps;
            }
        }

        /// <summary>
        /// 获得某一工作流实体已执行了多少步
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public int GetWFEntityFinishSteps(int wfe_id)
        {
            using (var db = base.NewDB())
            {
                var wfe = db.workflow_entities.Where(s => s.WE_Id == wfe_id).First();
                if (wfe != null)
                    return wfe.Process_Info.Count;
                else
                    return 0;
            }
        }

        /// <summary>
        /// 对工作流信息进行查询（low level）
        /// </summary>
        /// <param name="query_list">
        /// 需要查询的属性列――空字符串表示查询所有属性列， 慎用！！！！！
        /// 由于变量名的量比较大，强烈建议该参数不使用空串
        /// M 代表 Missions
        /// R 代表 Record
        /// P 代表 Params
        /// E 代表 WorkFlow_Entity
        /// 如 "M.Event_Name, M.Miss_Name, R.time, R.username, P.Proble_DataSrc, E.WE_Ser, E.W_Attribtuion, ..."
        /// </param>
        /// <param name="query_condition">查询条件，如： "R.username = 'fhp' and E.W_Name = 'A11dot1'"</param>
        /// <param name="record_filter">
        /// Record过滤器――空字符串表示不过滤
        /// 因为Process_Record表与Mission_Param是工作流数据库中最大的两张表，故而非常有必要再连接之前对两者进行预先筛选以提高效率
        /// 考虑到参数表（Mission_Param）的筛选条件可能比较复杂，因此在这个函数中只提供在连接前对Record进行预筛选
        /// 如: time >= '2015/12/25 0:00:00' and username = 'fhp'
        /// 特别需要提醒的是： 如果查询不需要record信息，请务必将该参数设置为 "1 <> 1"
        /// </param>

        public System.Data.DataTable QueryAllInformation(string query_list, string query_condition, string record_filter)
        {
            //分析需要查询的 属性列， P与R
            Regex paramReg = new Regex(@"(?<p>(P.|R.)\w+)");
            string str = String.Concat(query_list, " " + query_condition + " ");
            MatchCollection matches = paramReg.Matches(str);
            string p_str = "(";
            string r_str = "(";
            int f_par = 0, f_rec = 0;
            foreach (Match m in matches)
            {
                string par_sql = m.Groups["p"].Value;
                if (par_sql.IndexOf("P.") == 0)
                {
                    if (f_par == 0)
                        p_str += ("select '" + par_sql.Substring(2) + "' ");
                    else
                        p_str += ("union select '" + par_sql.Substring(2) + "' ");
                    f_par = 1;
                }
                else if (par_sql.IndexOf("R.") == 0)
                {
                    if (f_rec == 0)
                        r_str += ("select '" + par_sql.Substring(2) + "' ");
                    else
                        r_str += ("union select '" + par_sql.Substring(2) + "' ");
                    f_rec = 1;
                }

            }

            //p_str = p_str.TrimEnd(new char[] { ',' });
            //r_str = r_str.TrimEnd(new char[] { ',' });
            p_str = p_str + ")";
            r_str = r_str + ")";

            query_condition = query_condition.Replace(@"'", @"''");
            record_filter = record_filter.Replace(@"'", @"''");
            string str_sql;

            str_sql = "declare @sql varchar(8000)\n" +
                       "set @sql = 'select Re_Mission_Miss_Id '\n";
            if (r_str != "()")
            {
                str_sql +=
                       "select @sql = @sql + ',max(case Re_Name when ''' + Re_Name + ''' then Re_Value else null end)[' + Re_Name+'] '\n" +
                       "from (select distinct Re_Name from " + r_str + "t(Re_Name)) as a1\n";
            }
            str_sql += "set @sql = @sql + 'from Process_Record group by Re_Mission_Miss_Id'\n" +
                       "declare @sql1 varchar(8000)\n" +
                       "set @sql1 = 'select Miss_Belong_Miss_Id '\n";
            if (p_str != "()")
            {
                str_sql +=
                       "select @sql1 = @sql1 + ',max(case Param_Name when ''' + Param_Name + ''' then Param_Value else null end)[' + Param_Name+'] '\n" +
                       "from (select distinct Param_Name from " + p_str + "k(Param_Name)) as a2\n";
            }
            str_sql += "set @sql1 = @sql1 + 'from Mission_Param group by Miss_Belong_Miss_Id'\n" +
                       "declare @sql2 varchar(8000)\n" +
                       "set @sql2 = 'select WE_Id, W_Name, W_Attribution, WE_Ser, WE_Status from WorkFlow_Define, WorkFlow_Entity where WorkFlow_Define.W_ID = WorkFlow_Entity.WE_Wref_W_ID'\n" +
                       "declare @sql_t varchar(8000)\n";
            //对查询属性列进行处理
            if (query_list == "" || query_list == null)
                str_sql += "set @sql_t = 'select *  from ' +\n";
            else
                str_sql += "set @sql_t = 'select " + query_list + "  from ' +\n";

            str_sql += "             'Missions as M ' +\n" +
                       "             'inner join (' + @sql2 +') as E on M.Miss_WFentity_WE_Id = E.WE_Id ' + \n" +
                       "             'left join (' + @sql1 + ') as P on M.Miss_Id = P.Miss_Belong_Miss_Id ' +\n";
            //对Record进行筛选
            if (record_filter == "" || record_filter == null)
                str_sql += "             'left join (' + @sql + ')as R on M.Miss_Id = R.Re_Mission_Miss_Id'\n";
            else
                str_sql += "             'left join (select * from (' + @sql + ') as a3 where " + record_filter + ")as R on M.Miss_Id = R.Re_Mission_Miss_Id ";

            //对查询条件进行处理
            if (query_condition == "" || query_condition == null)
                str_sql += "'\n exec(@sql_t)";
            else
                str_sql += " where " + query_condition + "'\n exec(@sql_t)";

            System.Data.DataTable dt = new System.Data.DataTable();
            using (var db = base.NewDB())
            {
                var cmd = db.Database.Connection.CreateCommand();
                cmd.CommandText = str_sql;
                try
                {
                    db.Database.Connection.Open();
                    var re = cmd.ExecuteReader();
                    dt.Load(re);
                    re.Close();
                }
                catch (Exception e)
                {
                    dt = null;
                }
                finally
                {
                    db.Database.Connection.Close();
                }
                return dt;
            }
        }

        //2016/5/17--chenbin
        /// <summary>
        /// 更新工作流实体的当前任务
        /// </summary>
        /// <param name="wfEntity_ID">工作流实体ID</param>
        /// <returns></returns>
        public bool UpdateCurrentMission(int wfEntity_ID, CURR_Mission cMiss)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    var wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntity_ID).First();

                    //没有当前任务
                    if (wfe.Curr_Mission.Count == 0)
                        wfe.Curr_Mission.Add(cMiss);
                    else
                    {
                        CURR_Mission cur_miss = wfe.Curr_Mission.First();
                        if (cMiss != null)
                        {
                            cur_miss.After_Action = cMiss.After_Action;
                            cur_miss.Before_Action = cMiss.Before_Action;
                            cur_miss.Current_Action = cMiss.Current_Action;
                            cur_miss.Miss_Desc = cMiss.Miss_Desc;
                            cur_miss.Miss_Name = cMiss.Miss_Name;
                            cur_miss.Str_Authority = cMiss.Str_Authority;
                        }
                        else
                        {
                            db.current_mission.Remove(cur_miss);
                            //cMiss = null, 清除当前任务， 在end事件时调用
                            //wfe.Curr_Mission.Clear();
                        }
                    }
                    db.SaveChanges();
                }
            }
            catch(Exception e)
            {
                Trace.WriteLine(e.Message);
                return false;
            }
            return true;
        }

        /// <summary>
        /// 获得某一工作流的当前任务列表
        /// </summary>
        /// <param name="entityName"></param>
        /// <returns></returns>
        public List<CURR_Mission> GetActiveMissionsOfEntity(string entityName)
        {
            using (var db = base.NewDB())
            {
                if (entityName == "ALL")
                    return db.current_mission.Where(a => a.WFE_Parent.WE_Status == WE_STATUS.ACTIVE).ToList();                        
                else
                    return db.current_mission.Where(a => a.WFE_Parent.WE_Status == WE_STATUS.ACTIVE && a.WFE_Parent.WE_Wref.W_Name == entityName).ToList();                        
            }
        }

        
        //end 2016/5/17
    }

    
	//end WorkFlows

}//end namespace FlowEngine.DAL