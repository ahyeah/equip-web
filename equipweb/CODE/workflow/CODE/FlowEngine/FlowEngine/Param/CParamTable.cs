///////////////////////////////////////////////////////////
//  CParamTable.cs
//  Implementation of the Class CParamTable
//  Generated by Enterprise Architect
//  Created on:      26-10月-2015 9:46:30
//  Original author: chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FlowEngine.Param;
using FlowEngine;
using System.Xml;
using System.Diagnostics;
namespace FlowEngine.Param {
	/// <summary>
	/// 参数表，管理所有的参数
	/// </summary>
	public class CParamTable : IXMLEntity {

		private Dictionary<string, FlowEngine.Param.CParam> m_CParam = new Dictionary<string,FlowEngine.Param.CParam>();

		public CParamTable(){

		}

		~CParamTable(){

		}

		/// <summary>
		/// 为参数表添加一个参数
		/// </summary>
		/// <param name="param"></param>
		public void AppendParam(CParam param){
            try 
            {
                //如果添加的变量已存在                
                if (m_CParam.ContainsKey(param.name))
                    throw new Exception("Param " + param.name + " is already exist");

                m_CParam.Add(param.name, param);
            }catch(Exception e)
            {
                Trace.WriteLine(e.Message);
            }
		}

		/// <summary>
		/// 解析XML元素
		/// </summary>
		/// <param name="xmlNode"></param>
		public void InstFromXmlNode (XmlNode xmlNode){
            //1. 判断xmlNode的类型
            if (xmlNode.Name != "paramtable")
                return;

            //2. 设置ParamTable的属性

            //3. 解析Params
            foreach(XmlNode paxn in xmlNode.ChildNodes)
            {
                if (paxn.Name == "param")
                {
                    CParam pa = new CParam();
                    pa.InstFromXmlNode(paxn);
                    m_CParam.Add(pa.name, pa);
                }
            }
		}

		/// <summary>
		/// 通过变量名称返回变量对象
		/// </summary>
		/// <param name="pName">变量名</param>
		public CParam this[string pName]{

			get{
				return m_CParam[pName];
			}

		}

		/// <summary>
		/// 反解析到XML元素
		/// </summary>
		public XmlNode WriteToXmlNode(){

            XmlDocument doc = new XmlDocument();
            XmlElement ptxe = doc.CreateElement("paramtable");

            //1. 反解析ParamTable的属性
            
            //2. 反解析Params
            foreach(CParam pa in m_CParam.Values)
            {
                XmlNode paxn = pa.WriteToXmlNode();
                ptxe.AppendChild(doc.ImportNode(paxn, true));
            }
            return ptxe;
		}

		/// <summary>
		/// 参数表中包含参数（Param）的数量
		/// </summary>
		public int ParamsNum{
			get{
                return m_CParam.Count;
            }
		}

		/// <summary>
		/// 通过下标返回参数（Param）
		/// </summary>
		/// <param name="n"></param>
		public CParam this[int n]{

			get{
				List<CParam> pas = new List<CParam>(m_CParam.Values);
                return pas[n];
			}			
		}

		/// <summary>
		/// 判断列表中是否含有名称为parName变量
		/// </summary>
		/// <param name="parName"></param>
		public bool IsContainParam(string parName){

			return m_CParam.ContainsKey(parName);
		}
		
	}//end CParamTable

}//end namespace Param