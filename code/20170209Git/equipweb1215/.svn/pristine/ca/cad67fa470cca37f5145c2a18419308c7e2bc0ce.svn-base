using FlowEngine.DAL;
using FlowEngine.Event;
using FlowEngine.Modals;
using FlowEngine.Param;
using FlowEngine.UserInterface;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Data.Entity.Core.Objects;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace FlowEngine
{
    public class CWFEngine
    {
        public static Dictionary<string, object> authority_params = new Dictionary<string, object>();
        //获得系统所有的工作流定义
        public static List<UI_WF_Define> ListAllWFDefine()
        {
            WorkFlows wfs = new WorkFlows();

            List<UI_WF_Define> ui_wfs = new List<UI_WF_Define>();
            List<WorkFlow_Define> wds = wfs.GetAllWorkFlows();
            wds.ForEach(s => ui_wfs.Add(new UI_WF_Define { wf_name = s.W_Name, wf_description = s.W_Attribution }));

            return ui_wfs;
        }

        //创建一个工作流
        public static UI_WorkFlow_Entity CreateAWFEntityByName(string wf_name)
        {
            CWorkFlow wf = new CWorkFlow();

            if (!wf.CreateEntity(wf_name))
                return null;
            
            return wf;
        }

        //返回一个工作流定义
        public static UI_WF_Define GetWorkFlowDefine(string wf_name)
        {
            WorkFlows wfs = new WorkFlows();
            WorkFlow_Define wfd = wfs.GetWorkFlowDefine(wf_name);
            UI_WF_Define ui_wfd = new UI_WF_Define { wf_name = wfd.W_Name, wf_description = wfd.W_Attribution };
            return ui_wfd;
        }

        /// <summary>
        /// 将Record添加到subprocess
        /// </summary>
        private static void Post_processSubprocess(IEvent ev, IDictionary<string, string> record)
        {
            if (record == null)
                return;

            CSubProcessEvent sp = (CSubProcessEvent)ev;

            List<UI_MISSION> miss = GetHistoryMissions(sp.WfEntityId);
            
            WorkFlows wfs = new WorkFlows();
            
            foreach (UI_MISSION mi in miss)
            {
                List<Process_Record> prs = new List<Process_Record>();
                foreach (var re in record)
                {
                    Process_Record pr = new Process_Record();
                    pr.Re_Name = re.Key;
                    pr.Re_Value = re.Value;
                    prs.Add(pr);
                }                
                wfs.LinkRecordInfoToMiss(mi.Miss_Id, prs);
            }
            SubmitSignal(sp.WfEntityId, new Dictionary<string, string>(), record);
        }

        //发送消息到工作流
        public static void SubmitSignal(int wfe_id, IDictionary<string, string> signal, IDictionary<string, string> record = null)
        {
            WorkFlows wfs = new WorkFlows();
            WorkFlow_Entity wfe = wfs.GetWorkFlowEntity(wfe_id);

            CWorkFlow wf = new CWorkFlow();
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(Encoding.Default.GetString(wfe.WE_Binary));
            wf.InstFromXmlNode(doc.DocumentElement);
            wf.EntityID = wfe.WE_Id;

            string preState = wf.GetCurrentState();
            
            JArray ja = new JArray();
            foreach(var s in signal)
            {
                JObject jo = new JObject();
                jo.Add("name", s.Key);
                jo.Add("value", s.Value);
                ja.Add(jo);
            }
            wf.SubmitSignal(JsonConvert.SerializeObject(ja));         
            //如果preEvent为subprocess
            IEvent preEvent = wf.GetCurrentEvent();
            if (preEvent.GetType().Name == "CSubProcessEvent")
            {
                Post_processSubprocess(preEvent, record);

            }


            //状态发生了迁移
            if (wf.GetCurrentState() != preState)
            {
                if (record != null)
                {
                    Mission ms = wfs.GetWFEntityLastMission(wf.EntityID);

                    List<Process_Record> res = new List<Process_Record>();
                    foreach(var re in record)
                    {
                        //如果record中包含事件定义的需要记录的record item则记录到数据库中
                        if (wf.GetRecordItems().ContainsKey(re.Key))
                        {
                            Process_Record pre = new Process_Record();
                            pre.Re_Name = re.Key;
                            pre.Re_Value = re.Value;
                            res.Add(pre);
                        }
                    }
                    wfs.LinkRecordInfoToMiss(ms.Miss_Id, res);
                }
            }
        }

        private static void UpdateEntity(CWorkFlow wf, WE_STATUS status)
        {
            try
            {
                WorkFlow_Entity wfe = new WorkFlow_Entity
                {
                    WE_Id = wf.EntityID,
                    WE_Status = status
                };
                wfe.WE_Binary = Encoding.Default.GetBytes(wf.WriteToXmlNode().OuterXml);

                WorkFlows wfs = new WorkFlows();
                if (!wfs.SaveWorkFlowEntity(wfe))
                    throw new Exception("Save WorkFlow Entity failed!");

            }
            catch (Exception e)
            {
                return;
            }
        }

        //获取当前任务列表
        public static List<UI_MISSION> GetActiveMissions<T>(ObjectContext oc, string Entity_name="ALL", bool bAuthCheck = true)
        {
            List<UI_MISSION> missions = new List<UI_MISSION>();

            WorkFlows wfs = new WorkFlows();
            List<WorkFlow_Entity> wfes = wfs.GetActiveWorkFlowEntities(Entity_name);

            foreach(WorkFlow_Entity wfe in wfes)
            {
                

                UI_MISSION mi = new UI_MISSION();
                mi.WE_Entity_Id = wfe.WE_Id;
                mi.WE_Name = wfs.GetWorkFlowEntityName(wfe.WE_Id);

                //恢复工作流实体
                CWorkFlow wf = new CWorkFlow();
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(Encoding.Default.GetString(wfe.WE_Binary));
                wf.InstFromXmlNode(doc.DocumentElement);
                wf.EntityID = wfe.WE_Id;

                if (wf.CurrentEventLink() == "")
                    continue;

                //权限验证
                if (bAuthCheck)
                {
                    IEvent ev = wf.GetCurrentEvent();
                    if (!ev.CheckAuthority<T>(authority_params, oc))
                        continue;
                }
                

                mi.WE_Event_Name = wf.GetCurrentEvent().name;
                mi.WE_Event_Desc = wf.GetCurrentEvent().description;
                mi.Mission_Url = wf.CurrentEventLink();
                //读取参数的值
                foreach(var pa in wf.GetCurrentEvent().paramlist)
                {
                    mi.Miss_Params[pa.Key] = pa.Value.value;
                }

                missions.Add(mi);
            }
            return missions;
        }

        //获得工作流实体的当前任务
        public static UI_MISSION GetActiveMission<T>(int entity_id, ObjectContext oc, bool bAuthCheck = true)
        {
            UI_MISSION miss = new UI_MISSION();

            WorkFlows wfs = new WorkFlows();

            WorkFlow_Entity wfe = wfs.GetWorkFlowEntity(entity_id);

            miss.WE_Entity_Id = wfe.WE_Id;
            miss.WE_Name = wfs.GetWorkFlowEntityName(wfe.WE_Id);

            //恢复工作流实体
            CWorkFlow wf = new CWorkFlow();
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(Encoding.Default.GetString(wfe.WE_Binary));
            wf.InstFromXmlNode(doc.DocumentElement);
            wf.EntityID = wfe.WE_Id;
            //权限验证
            if (bAuthCheck)
            {
                IEvent ev = wf.GetCurrentEvent();
                if (!ev.CheckAuthority<T>(authority_params, oc))
                    return null;
            }

            miss.WE_Event_Name = wf.GetCurrentEvent().name;
            miss.WE_Event_Desc = wf.GetCurrentEvent().description;
            miss.Mission_Url = wf.CurrentEventLink();
            //读取参数的值
            foreach (var pa in wf.GetCurrentEvent().paramlist)
            {
                miss.Miss_Params[pa.Key] = pa.Value.value;
            }

            return miss;

        }

        /// <summary>
        /// 获取某一工作流实体的历史任务
        /// </summary>
        /// <param name="entity_id">工作流实体ID</param>
        /// <returns></returns>
        public static List<UI_MISSION> GetHistoryMissions(int entity_id)
        {
            List<UI_MISSION> his_miss = new List<UI_MISSION>();

            WorkFlows wfs = new WorkFlows();
            List<Mission> db_miss = wfs.GetWFEntityMissions(entity_id);

            WorkFlow_Entity wfe = wfs.GetWorkFlowEntity(entity_id);
            

            foreach(var mi in db_miss)
            {
                UI_MISSION ui_mi = new UI_MISSION();
                ui_mi.WE_Entity_Id = entity_id;
                ui_mi.WE_Event_Desc = mi.Miss_Desc;
                ui_mi.WE_Event_Name = mi.Event_Name;
                ui_mi.WE_Name = mi.Miss_Name;
                ui_mi.Mission_Url = ""; //历史任务的页面至空
                ui_mi.Miss_Id = mi.Miss_Id;

                List<Mission_Param> mis_pars = wfs.GetMissParams(mi.Miss_Id);
                foreach(var par in mis_pars)
                {
                    CParam cp = new CParam();
                    cp.type = par.Param_Type;
                    cp.name = par.Param_Name;
                    cp.value = par.Param_Value;
                    cp.description = par.Param_Desc;

                    ui_mi.Miss_Params[cp.name] = cp.value;
                }
                his_miss.Add(ui_mi);
            }
            return his_miss;
        }

        /// <summary>
        /// 根据历史任务状态选择符合条件的工作流
        /// </summary>
        /// <param name="condition">查询条件的lambda表达式如： s => (s.Params_Info.Count(t => t.name = "approve_user" && t.value = "cb1") > 0)</param>
        /// <returns></returns>
        public static List<UI_WFEntity_Info> GetWFEntityByHistoryStatus(System.Linq.Expressions.Expression<Func<Mission, bool>> condition)
        {
            List<UI_WFEntity_Info> wfe_info = new List<UI_WFEntity_Info>();

            WorkFlows wfs = new WorkFlows();

            List<WorkFlow_Entity> wfes = null;
            //List<WorkFlow_Entity> wfes = wfs.GetWFEntityByConditon(s => s.Process_Info.wh );
            try
            {
                using (var db = new WorkFlowContext())
                {
                    wfes = db.mission.Where(condition).Select(a => a.Miss_WFentity).Distinct().Where(s => s.WE_Status != WE_STATUS.DELETED).ToList();
                }
            }
            catch(Exception e)
            {
                return null;
            }

            foreach(WorkFlow_Entity fe in wfes)
            {
                UI_WFEntity_Info fe_info = new UI_WFEntity_Info();
                fe_info.name = wfs.GetWorkFlowEntityName(fe.WE_Id);
                fe_info.Status = fe.WE_Status;
                fe_info.EntityID = fe.WE_Id;
                fe_info.description = wfs.GetWorkFlowEntityDesc(fe.WE_Id);
                wfe_info.Add(fe_info);

            }
            return wfe_info;
        }
        public static List<UI_WFEntity_Info> GetWFEntityByHistoryDone(System.Linq.Expressions.Expression<Func<Mission, bool>> condition)
        {
            List<UI_WFEntity_Info> wfe_info = new List<UI_WFEntity_Info>();

            WorkFlows wfs = new WorkFlows();

            List<WorkFlow_Entity> wfes = null;
            //List<WorkFlow_Entity> wfes = wfs.GetWFEntityByConditon(s => s.Process_Info.wh );
            try
            {
                using (var db = new WorkFlowContext())
                {
                    wfes = db.mission.Where(condition).Select(a => a.Miss_WFentity).Distinct().Where(s => s.WE_Status == WE_STATUS.DONE).ToList();
                }
            }
            catch (Exception e)
            {
                return null;
            }

            foreach (WorkFlow_Entity fe in wfes)
            {
                UI_WFEntity_Info fe_info = new UI_WFEntity_Info();
                fe_info.name = wfs.GetWorkFlowEntityName(fe.WE_Id);
                fe_info.Status = fe.WE_Status;
                fe_info.EntityID = fe.WE_Id;
                fe_info.description = wfs.GetWorkFlowEntityDesc(fe.WE_Id);
                wfe_info.Add(fe_info);

            }
            return wfe_info;
        }

        /// <summary>
        /// 获得某一工作流历史平均需要的步骤数量
        /// </summary>
        /// <param name="wf_name">工作流的名称</param>
        /// <returns></returns>
        public static int GetWorkFlowAvgSteps(string wf_name)
        {
            WorkFlows wfs = new WorkFlows();
            return wfs.GetWFAvgSteps(wf_name);
        }
        
        /// <summary>
        /// 获得某一工作流实体目前完成的步骤数量
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public static int GetWFEntityFinishSteps(int wfe_id)
        {
            WorkFlows wfs = new WorkFlows();
            return wfs.GetWFEntityFinishSteps(wfe_id);
        }

        public static IDictionary<string, string> GetMissionRecordInfo(int wfe_id)
        {
            WorkFlows wfs = new WorkFlows();
            List<Process_Record> Pre = wfs.GetMissionRecordInfo(wfe_id);
            Dictionary<string, string> res = new Dictionary<string, string>();

            foreach(var p in Pre)
            {
                res[p.Re_Name] = p.Re_Value;
            }
            return res;
        }
    }
}

