using EquipModel.Entities;
using FlowEngine;
using FlowEngine.UserInterface;
using WebApp.Models;
using WebApp.Models.User;
using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using EquipModel.Context;
using System.Text;
using EquipBLL.AdminManagment;
using System.IO;

namespace WebApp.Controllers
{
    public class CommonController : Controller
    {
        //Page Models
        public class MainModel
        {
            public string userName;
            public string missTime;
            public int missIndex;
            public string miss_desc;
            public string miss_url;
            public string wfe_serial;
        }

        public class HistroyModel
        {
            public int miss_wfe_Id;
            public string missStartName;
            public string missStartTime;
            public int missIndex;
            public string miss_LastStatusdesc;
            public string wfe_serial;
        }

        public class Index_Model
        {
            public List<MainModel> Am;
            public List<HistroyModel> Hm;
        }

        public class MissInfoModel
        {
            public UI_MISSION miModel;
            public List<string> MissTime;
            public List<string> MissUser;
        }

        public class WFDetail_Model
        {
            public List<UI_MISSION> ALLHistoryMiss;
            public List<string> MissTime;
            public List<string> MissUser;
        }

        public class ZzSubmitModel
        {
            public string UserName;
            public string UserDepartment;
            public List<Equip_Archi> UserHasEquips;
        }

        //Risk Matrix
        public class RiskMatrixElement
        {
            public int danger_intensity;
            public int time_level;
            public string color;
            public string DangerType_isgreen;
        }
        //Page BLL Codes
        /// <summary>
        /// 获取工作流Index页面的列表记录
        /// </summary>
        /// <param name="WorkFlow_Name">工作流名称，如A8dot2</param>
        /// <param name="username">用户名</param>
        /// <returns></returns>
        public Index_Model getIndexListRecords(string WorkFlow_Name, string username)
        {
            List<UI_MISSION> miss;
            //miss = CWFEngine.GetActiveMissions<Person_Info>(((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            miss = CWFEngine.GetActiveMissions<Person_Info>(((IObjectContextAdapter)(new EquipWebContext())).ObjectContext, WorkFlow_Name, true);
            Index_Model listRecord = new Index_Model();
            listRecord.Am = new List<MainModel>();
            foreach (var item in miss)
            {
                MainModel o = new MainModel();
                UI_MISSION lastMi = CWFEngine.GetHistoryMissions(item.WE_Entity_Id).Last();
                int Miss_Id = lastMi.Miss_Id;
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
                if (r.Count > 0)
                {
                    o.userName = r["username"];
                    o.missTime = r["time"];
                }
                else
                {
                    o.userName = "";
                    o.missTime = "";
                }
                o.missIndex = miss.IndexOf(item) + 1;
                o.miss_desc = item.WE_Event_Desc;
                o.miss_url = item.Mission_Url;
                //
                //List<UI_WFEntity_Info> current_entitie = CWFEngine.GetWFEntityByHistoryStatus(t => t.Miss_WFentity.WE_Id== item.WE_Entity_Id);
                //o.wfe_serial = current_entitie[0].serial;
                o.wfe_serial = lastMi.WE_Entity_Ser;
                listRecord.Am.Add(o);
            }
            listRecord.Hm = new List<HistroyModel>();
            HistroyModel h;
            List<UI_WFEntity_Info> start_entities = CWFEngine.GetWFEntityByHistoryDone(t => t.Record_Info.Count(q => q.Re_Name == "username" && q.Re_Value == username) > 0 && t.Miss_WFentity.WE_Wref.W_Name == WorkFlow_Name);
            foreach (var item in start_entities)
            {
                h = new HistroyModel();
                List<UI_MISSION> AllHistoryMiss = CWFEngine.GetHistoryMissions(item.EntityID);
                int Miss_Id = AllHistoryMiss[0].Miss_Id;
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
                if (r.Count > 0)
                {
                    h.missStartName = r["username"];
                    h.missStartTime = r["time"];
                }
                else
                {
                    h.missStartName = "";
                    h.missStartTime = "";
                }
                h.missIndex = start_entities.IndexOf(item) + 1;
                h.wfe_serial = item.serial;
                UI_MISSION miss_last = AllHistoryMiss[AllHistoryMiss.Count() - 1];

                h.miss_LastStatusdesc = miss_last.WE_Event_Desc;
                h.miss_wfe_Id = item.EntityID;
                listRecord.Hm.Add(h);
            }
            return listRecord;
        }

        public JsonResult Cj_Zzs(int cj_id)
        {
            EquipManagment pm = new EquipManagment();
            List<Equip_Archi> Zz = pm.getZzs_ofCj(cj_id);
            List<object> Zz_obj = new List<object>();
            foreach (var item in Zz)
            {
                object o = new
                {
                    Zz_Id = item.EA_Id,
                    Zz_Name = item.EA_Name
                };
                Zz_obj.Add(o);

            }
            return Json(Zz_obj.ToArray());

        }

        public JsonResult Zz_Equips(int Zz_id)
        {
            EquipManagment pm = new EquipManagment();
            List<Equip_Info> Equips_of_Zz = pm.getEquips_OfZz(Zz_id);
            List<object> Equip_obj = new List<object>();
            foreach (var item in Equips_of_Zz)
            {
                object o = new
                {
                    Equip_Id = item.Equip_Id,
                    Equip_GyCode = item.Equip_GyCode,
                    // Equip_Code=item.Equip_Code,
                    //  Equip_Type=item.Equip_Type,
                    // Equip_Specialty=item.Equip_Specialty
                };
                Equip_obj.Add(o);

            }
            return Json(Equip_obj.ToArray());

        }

        public JsonResult ListEquip_Info(int Equip_Id)
        {
            EquipManagment pm = new EquipManagment();
            Equip_Info EquipInfo_selected = pm.getEquip_Info(Equip_Id);
            List<object> Equip_obj = new List<object>();

            object o = new
            {
                Equip_Code = EquipInfo_selected.Equip_Code,
                Equip_Type = EquipInfo_selected.Equip_Type,
                Equip_Specialty = EquipInfo_selected.Equip_Specialty
            };
            Equip_obj.Add(o);
            return Json(Equip_obj.ToArray());

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public ZzSubmitModel getSubmitModel(string wfe_id)
        {
            PersonManagment pm = new PersonManagment();
            ZzSubmitModel mm = new ZzSubmitModel();
            ViewBag.WF_NAME = wfe_id;
            mm.UserName = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            mm.UserDepartment = pm.Get_Person_DepartOfParent((Session["User"] as EquipModel.Entities.Person_Info).Person_Id).Depart_Name;
            mm.UserHasEquips = pm.Get_Person_Cj((Session["User"] as EquipModel.Entities.Person_Info).Person_Id);
            return mm;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public MissInfoModel getMissInfoModel(string wfe_id)
        {
            MissInfoModel cm = new MissInfoModel();
            ViewBag.WF_NAME = wfe_id;
            cm.miModel = CWFEngine.GetActiveMission<Person_Info>(int.Parse(wfe_id), ((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            cm.MissTime = new List<string>();
            cm.MissUser = new List<string>();
            string t;
            foreach (var item in CWFEngine.GetHistoryMissions(cm.miModel.WE_Entity_Id))
            {
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                t = r["username"];
                cm.MissUser.Add(t);
                t = r["time"];
                cm.MissTime.Add(t);
            }
            ViewBag.curtime = DateTime.Now.ToString();
            ViewBag.curuser = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            return cm;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public WFDetail_Model getWFDetail_Model(string wfe_id)
        {
            WFDetail_Model cm = new WFDetail_Model();
            ViewBag.WF_NAME = wfe_id;
            cm.ALLHistoryMiss = CWFEngine.GetHistoryMissions(int.Parse(wfe_id));
            cm.MissTime = new List<string>();
            cm.MissUser = new List<string>();
            string t;
            foreach (var item in cm.ALLHistoryMiss)
            {
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                if (r.Count > 0)
                {
                    t = r["username"];
                    cm.MissUser.Add(t);
                    t = r["time"];
                    cm.MissTime.Add(t);
                }
                else
                {
                    cm.MissUser.Add("");
                    cm.MissTime.Add("");
                }
            }
            return cm;
        }

        [HttpPost]
        public JsonResult Upload(HttpPostedFileBase file)
        {

            if (file.ContentLength == 0)
            {
                return Json(new { message = "没有文件" });
            }
            var fileName = Path.Combine(Request.MapPath("~/Upload"), Path.GetFileName(file.FileName));
            try
            {
                file.SaveAs(fileName);
                var FileSize = (file.ContentLength * 1.0 / 1024).ToString("0.00");
                Dictionary<string, string> r = new Dictionary<string, string>();
                r.Add("message", "上传成功");
                r.Add("fileName", file.FileName);
                r.Add("fileSize", FileSize);
                return Json(r);
            }
            catch
            {
                return Json(new { message = "上传失败" });
            }
        }

        public JsonResult DelAttachment(string file)
        {
            try
            {
                string filePath = Path.Combine(Request.MapPath("~/Upload"), file);
                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                    return Json(new { status = "success" });
                }
                return Json(new { status = "false", message = "附件删除失败!" });
            }
            catch (Exception ex)
            {
                return Json(new { status = "false", message = "附件删除失败!" });
            }
        }

	}
}