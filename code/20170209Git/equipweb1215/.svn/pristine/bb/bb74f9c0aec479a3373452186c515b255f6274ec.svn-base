using EquipModel.Entities;
using FlowEngine;
using FlowEngine.UserInterface;
using WebApp.Models;
using WebApp.Models.User;
using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using EquipModel.Context;
using System.Text;
using EquipBLL.AdminManagment;
using System.IO;

namespace WebApp.Controllers
{
    public class A8dot2Controller : Controller
    {
        //
        public class MainModel
        {
            public string userName;
            public string missTime;
            public int missIndex;
            public string miss_desc;
            public string miss_url;
        }
        public class HistroyModel
        {
            public int miss_wfe_Id;
            public string missStartName;
            public string missStartTime;
            public int missIndex;
            public string miss_LastStatusdesc;
        }
        public class Index_Model
        {
            public List<MainModel> Am;
            public List<HistroyModel> Hm;
        }
        public class CatalogModel
        {
            public UI_MISSION miModel;
            public List<string> MissTime;
            public List<string> MissUser;
        }
        public class WFDetail_Model
        {
            public List<UI_MISSION> ALLHistoryMiss;
            public List<string> MissTime;
            public List<string> MissUser;
        }
        public class ZzSubmitModel
        {
            public string UserName;
            public string UserDepartment;
            public List<Equip_Archi> UserHasEquips;
        }

        // GET: /A8dot2/
        public ActionResult Index()
        {
            List<UI_MISSION> miss;
            //miss = CWFEngine.GetActiveMissions<Person_Info>(((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            miss = CWFEngine.GetActiveMissions<Person_Info>(((IObjectContextAdapter)(new EquipWebContext())).ObjectContext, "A8dot2", true);
            Index_Model listRecord = new Index_Model();
            listRecord.Am = new List<MainModel>();
            foreach (var item in miss)
            {
                MainModel o = new MainModel();
                int Miss_Id = CWFEngine.GetHistoryMissions(item.WE_Entity_Id).Last().Miss_Id;
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
                if (r.Count > 0)
                {
                    o.userName = r["username"];
                    o.missTime = r["time"];
                }
                else
                {
                    o.userName = "";
                    o.missTime = "";
                }
                o.missIndex = miss.IndexOf(item) + 1;
                o.miss_desc = item.WE_Event_Desc;
                o.miss_url = item.Mission_Url;
                listRecord.Am.Add(o);
            }
            listRecord.Hm = new List<HistroyModel>();
            HistroyModel h;
            List<UI_WFEntity_Info> start_entities = CWFEngine.GetWFEntityByHistoryDone(t => t.Record_Info.Count(q => q.Re_Name == "username" && q.Re_Value == "fhp") > 0 && t.Miss_WFentity.WE_Wref.W_Name == "A8dot2");
            foreach (var item in start_entities)
            {
                h = new HistroyModel();
                List<UI_MISSION> AllHistoryMiss = CWFEngine.GetHistoryMissions(item.EntityID);
                int Miss_Id = AllHistoryMiss[0].Miss_Id;
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
                if (r.Count > 0)
                {
                    h.missStartName = r["username"];
                    h.missStartTime = r["time"];
                }
                else
                {
                    h.missStartName = "";
                    h.missStartTime = "";
                }
                h.missIndex = start_entities.IndexOf(item) + 1;
                UI_MISSION miss_last = AllHistoryMiss[AllHistoryMiss.Count() - 1];

                h.miss_LastStatusdesc = miss_last.WE_Event_Desc;
                h.miss_wfe_Id = item.EntityID;
                listRecord.Hm.Add(h);
            }
            return View(listRecord);
           
        }

        // GET: /A8dot2/DRBPM生成提报（模拟）
        public ActionResult DrbpmSubmit()
        {
            return View();
        }
        // GET: /A8dot2/推送到ERP生成工单
        public ActionResult ToERPCreateJob()
        {
            return View();
        }

        // GET: /A8dot2/检维修单位完善工单，制定检修方案
        public ActionResult JxdwCreatePlan()
        {
            return View();
        }
        // GET: /A8dot2/机动处（专业团队）审核下达
        public ActionResult ZytdConfirm()
        {
            return View();
        }

        // GET: /A8dot2/风险评估是否可行
        public ActionResult ToRiskAssess()
        {
            return View();
        }

        // GET: /A8dot2/维修单位建立通知单，实施检修计划
        public ActionResult JxdwImplementPlan()
        {
            return View();
        }

        // GET: /A8dot2/片区进行检修过程质量检查控制
        public ActionResult PqQualityControl()
        {
            return View();
        }

        // GET: /A8dot2/检修计划实施完成，封闭通知单
        public ActionResult JobFinishClose()
        {
            return View();
        }

        public string DrbpmSubmit_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["DrbpmSubmit_done"] = item["DrbpmSubmit_done"].ToString();
                signal["Equip_Code"] = item["Equip_Code"].ToString();
                signal["Abstract"] = item["Abstract"].ToString();
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }
        public string ToERPCreateJob_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["ToERPCreateJob_done"] = item["ToERPCreateJob_done"].ToString();
                signal["Equip_Code"] = item["Equip_Code"].ToString();
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }

        public string JxdwCreatePlan_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["JxdwCreatePlan_done"] = item["JxdwCreatePlan_done"].ToString();
                signal["Job_Order"] = item["Job_Order"].ToString();
                signal["Plan_Desc"] = item["Plan_Desc"].ToString();
                signal["Plan_DescFilePath"] = item["Plan_DescFilePath"].ToString();
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }

        public string ZytdConfirm_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["ZytdConfirm_done"] = item["ZytdConfirm_done"].ToString();                
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }
        
        public string ToRiskAssess_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["RiskAssess_result"] = item["RiskAssess_result"].ToString();                
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }

        public string JxdwImplementPlan_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["JxdwImplementPlan_done"] = item["JxdwImplementPlan_done"].ToString();                
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }

        public string PqQualityControl_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["PqQualityControl_done"] = item["PqQualityControl_done"].ToString();
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }

        public string JobFinishClose_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["JobFinishClose_done"] = item["JobFinishClose_done"].ToString();
                //record
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal, record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A8dot2/Index");
        }
	}
}