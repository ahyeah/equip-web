using EquipModel.Entities;
using FlowEngine;
using FlowEngine.Modals;
using FlowEngine.UserInterface;
using WebApp.Models;
using WebApp.Models.User;
using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using EquipModel.Context;
using System.Text;
using EquipBLL.AdminManagment;
using System.IO;
using System.Xml;
using FlowEngine.Event;
using FlowEngine.DAL;

namespace WebApp.Controllers
{
    public class A13dot1Controller : CommonController
    {
        
       
        public class MissHisLinkModal
        {
            public int Miss_Id;
            public string Miss_Name;
            public string Miss_Time;
            public int Miss_Type;  //0：一般任务  1：子流程任务
            public string Miss_LinkFlowType;//"Normal" ，"paradel","Serial"
            public int Miss_LinkFlowId;//跳转的工作流Id
        }

        public class ListMissHisLInkModal
        {
            public int Flow_Id;
            public string Flow_Name;
            public List<MissHisLinkModal> Miss;
        }
        //
        // GET: /A13dot1/
        public ActionResult Index()
        {
            return View(getIndexListRecords("A13dot1", (Session["User"] as EquipModel.Entities.Person_Info).Person_Name));            
        }
        // GET: /A13dot1/装置提报
        public ActionResult ZzSubmit(string wfe_id)
        {
            return View(getSubmitModel(wfe_id));
        }

        // GET: /A13dot1/片区分类
        public ActionResult PqCatalog(string  wfe_id)
        {         
            return View(getWFDetail_Model(wfe_id));
        }
               
        // GET: /A13dot1/专业团队审核
        public ActionResult ZytdConfirm(string wfe_id)
        {
            return View(getWFDetail_Model(wfe_id));
        }
        
        public ActionResult WorkFolw_Detail(string wfe_id)
        {
            return View(getWFDetail_Model(wfe_id));
        }

        public ActionResult WorkFlow_HisDetailParallel(int Entity_Id)
        {

            List<UI_MISSION> miss;
            ListMissHisLInkModal missModals = new ListMissHisLInkModal();
            missModals.Miss = new List<MissHisLinkModal>();
            UI_WFEntity_Info wfe = CWFEngine.GetWorkFlowEntiy(Entity_Id, true);
            missModals.Flow_Id = Entity_Id;
            missModals.Flow_Name = wfe.name;
            miss = CWFEngine.GetHistoryMissions(wfe.EntityID);
            if (wfe.Status == WE_STATUS.ACTIVE)
            {
                miss.Add(CWFEngine.GetActiveMission<Person_Info>(wfe.EntityID, null, false));
            }
            WorkFlows wfs = new WorkFlows();
            WorkFlow_Entity wfe2 = wfs.GetWorkFlowEntity(wfe.EntityID);
            CWorkFlow wf = new CWorkFlow();
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(Encoding.Default.GetString(wfe2.WE_Binary));
            wf.InstFromXmlNode(doc.DocumentElement);
            wf.EntityID = wfe.EntityID;
            IDictionary<string, IEvent> allEvents = wf.events;
            foreach (var item in miss)
            {

                MissHisLinkModal m = new MissHisLinkModal();
                m.Miss_Id = item.Miss_Id;
                m.Miss_Name = item.WE_Event_Desc;
                if (item.Miss_Id > 0)
                {
                    IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                    if (r.Count > 0)
                    {
                        m.Miss_Time = r["time"];
                    }
                    else
                    {
                        m.Miss_Time = "";
                    }
                }
                else
                {
                    m.Miss_Time = "";
                }
                if (allEvents[item.WE_Event_Name].GetType().Name == "CSubProcessEvent")
                {
                    m.Miss_Type = 1;
                    m.Miss_LinkFlowType = ((CSubProcessEvent)allEvents[item.WE_Event_Name]).WorkingMode;
                    m.Miss_LinkFlowId = ((CSubProcessEvent)allEvents[item.WE_Event_Name]).WfEntityId;
                }
                else
                {
                    m.Miss_Type = 0;
                    m.Miss_LinkFlowType = "Normal";
                    m.Miss_LinkFlowId = -1;
                }

                missModals.Miss.Add(m);
            }
            return View(missModals);
        }
        public ActionResult WorkFlow_HisDetail()
        {
          
             List<UI_MISSION> miss;
             ListMissHisLInkModal missModals = new ListMissHisLInkModal();
             missModals.Miss = new List<MissHisLinkModal>();
            UI_WFEntity_Info wfe=CWFEngine.GetMainWorkFlowEntity("20160200010");
            missModals.Flow_Id = wfe.EntityID;
            missModals.Flow_Name = wfe.name;
            miss = CWFEngine.GetHistoryMissions(wfe.EntityID);
            if (wfe.Status == WE_STATUS.ACTIVE)
            {
                miss.Add(CWFEngine.GetActiveMission<Person_Info>(wfe.EntityID, null, false));
            }
                WorkFlows wfs = new WorkFlows();
                WorkFlow_Entity wfe2 = wfs.GetWorkFlowEntity(wfe.EntityID);
                CWorkFlow wf = new CWorkFlow();
                XmlDocument doc = new XmlDocument();
                doc.LoadXml(Encoding.Default.GetString(wfe2.WE_Binary));
                wf.InstFromXmlNode(doc.DocumentElement);
                wf.EntityID = wfe.EntityID;
                IDictionary<string,IEvent> allEvents=wf.events;
            foreach (var item in miss)
            {
               
                MissHisLinkModal m = new MissHisLinkModal();
                m.Miss_Id = item.Miss_Id;
                m.Miss_Name = item.WE_Event_Desc;
                if (item.Miss_Id>0)
                { IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                if (r.Count > 0  )
                {
                    m.Miss_Time = r["time"];
                }
                else
                {
                  m.Miss_Time = "";
               }
                }
                else{
                    m.Miss_Time = "";
                }
                if(allEvents[item.WE_Event_Name].GetType().Name=="CSubProcessEvent")
                {
                    m.Miss_Type = 1;
                    m.Miss_LinkFlowType = ((CSubProcessEvent)allEvents[item.WE_Event_Name]).WorkingMode;
                    m.Miss_LinkFlowId = ((CSubProcessEvent)allEvents[item.WE_Event_Name]).WfEntityId;
                }else
                { m.Miss_Type = 0;
                  m.Miss_LinkFlowType = "Normal";
                  m.Miss_LinkFlowId = -1;
                }

                missModals.Miss.Add(m);
            }
          
            return View(missModals);
        }
    
        public JsonResult WorkFlow_SubProcess( int FlowId)
        {
            List<UI_MISSION> miss;
            ListMissHisLInkModal missModals = new ListMissHisLInkModal();
            missModals.Miss = new List<MissHisLinkModal>();
            UI_WFEntity_Info wfe = CWFEngine.GetWorkFlowEntiy(FlowId,true);
            missModals.Flow_Id = FlowId;
            missModals.Flow_Name = wfe.name;
            miss = CWFEngine.GetHistoryMissions(wfe.EntityID);
            if (wfe.Status == WE_STATUS.ACTIVE)
            {
                miss.Add(CWFEngine.GetActiveMission<Person_Info>(wfe.EntityID, null, false));
            }
            WorkFlows wfs = new WorkFlows();
            WorkFlow_Entity wfe2 = wfs.GetWorkFlowEntity(wfe.EntityID);
            CWorkFlow wf = new CWorkFlow();
            XmlDocument doc = new XmlDocument();
            doc.LoadXml(Encoding.Default.GetString(wfe2.WE_Binary));
            wf.InstFromXmlNode(doc.DocumentElement);
            wf.EntityID = wfe.EntityID;
            IDictionary<string, IEvent> allEvents = wf.events;
            foreach (var item in miss)
            {

                MissHisLinkModal m = new MissHisLinkModal();
                m.Miss_Id = item.Miss_Id;
                m.Miss_Name = item.WE_Event_Desc;
                if (item.Miss_Id > 0)
                {
                    IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                    if (r.Count > 0)
                    {
                        m.Miss_Time = r["time"];
                    }
                    else
                    {
                        m.Miss_Time = "";
                    }
                }
                else
                {
                    m.Miss_Time = "";
                }
                if (allEvents[item.WE_Event_Name].GetType().Name == "CSubProcessEvent")
                {
                    m.Miss_Type = 1;
                    m.Miss_LinkFlowType = ((CSubProcessEvent)allEvents[item.WE_Event_Name]).WorkingMode;
                    m.Miss_LinkFlowId = ((CSubProcessEvent)allEvents[item.WE_Event_Name]).WfEntityId;
                }
                else
                {
                    m.Miss_Type = 0;
                    m.Miss_LinkFlowType = "Normal";
                    m.Miss_LinkFlowId = -1;
                }

                missModals.Miss.Add(m);
            }
            return Json(missModals);

        }

        public JsonResult WorkFlow_ListParam(string json1)
        {  
            JObject item = (JObject)JsonConvert.DeserializeObject(json1);

           int Flow_Id = Convert.ToInt32(item["Entity_Id"].ToString());
           int Mission_Id = Convert.ToInt32(item["Mission_Id"].ToString());
          List<UI_MissParam>  MissParams = CWFEngine.GetMissionParams(Flow_Id,Mission_Id);
           return Json(MissParams.ToArray());


        }
        public string ZzSubmit_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["ZzSubmit_done"] = "true"; 
                signal["Cj_Name"] = item["Cj_Name"].ToString();
                signal["Zz_Name"] = item["Zz_Name"].ToString();              
                signal["Equip_GyCode"] = item["Equip_GyCode"].ToString();
                signal["Equip_Code"] = item["Equip_Code"].ToString();
                signal["Equip_Type"] = item["Equip_Type"].ToString();
                signal["Problem_Desc"] = item["Problem_Desc"].ToString();  
                signal["Problem_DescFilePath"] = item["Problem_DescFilePath"].ToString();
                signal["Zy_Type"] = item["Zy_Type"].ToString();
                signal["Zy_SubType"] = item["Zy_SubType"].ToString();
                EquipManagment em = new EquipManagment();
                signal["Equip_ABCMark"] = em.getEquip_Info(item["Equip_Code"].ToString()).Equip_ABCmark;
                //signal["Equip_ABCMark"] = "A";//for test               
                signal["Data_Src"] ="人工提报"; //格式统一
                //record
                Dictionary<string, string> record =  new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A13dot1/Index");
        }

        public string PqCatalog_submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                Dictionary<string, string> signal = new Dictionary<string, string>();
                var flowname = item["Flow_Name"].ToString();
                signal["catlog_type"] = item["catlog_type"].ToString();

                if (item["catlog_type"].ToString() == "完好类" )
                {
                    signal["defect_level"] = item["defect_level"].ToString();
                    
                }
                else if (item["catlog_type"].ToString() == "隐患")
                {
                    signal["defect_level"] = item["defect_level"].ToString();
                }
                else if (item["catlog_type"].ToString() == "故障")
                {
                    signal["defect_level"] = item["defect_level"].ToString();
                    signal["fault_intensity"] = item["fault_intensity"].ToString();
                }
                Dictionary<string, string> record = new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);
            }
            catch (Exception e)
            { return ""; }
            return ("/A13dot1/Index");
        }

        public string ZytdConfirm_submitsignal(string json1)
        {
            JObject item = (JObject)JsonConvert.DeserializeObject(json1);
            string flowname = item["Flow_Name"].ToString();   
            Dictionary<string, string> signal = new Dictionary<string, string>();
            //new input paras
            signal["fault_intensity"] = item["fault_intensity"].ToString();
            signal["ZytdConfirm_Result"] = "true";
            Dictionary<string, string> record = new Dictionary<string, string>();
            record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            record["time"] = DateTime.Now.ToString();
            CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);
            return ("/A13dot1/Index");
        }

    }
}