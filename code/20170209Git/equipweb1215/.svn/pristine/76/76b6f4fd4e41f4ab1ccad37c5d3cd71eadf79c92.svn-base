using EquipDAL.Implement;
using EquipModel.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EquipBLL.AdminManagment
{
    public class BaseDataManagment
    {
        private Depart_Archis DA = new Depart_Archis();
        private Speciaties SD = new Speciaties();
        private Roles RD = new Roles();
        private Menus MD=new Menus();
        public List<Role_Info> GetAllRoles()
        {
            try
            {
                var r = RD.getRoles();
                return r;
            }
            catch { return null; }
        }


        public List<Menu> GetRole_Menus(string PersonRoles)
        {
            try
            {


                var r = RD.getPerson_Role_Menus(PersonRoles);

                
                return r;
            }
            catch { return null; }
        }
        public Depart_Archi GetRootTree()
        {
            try
            {
                Depart_Archi res = DA.getDepart_root("root");
                if (res==null)
                    throw new Exception("DB has not only one root item");
                return res;
            }
            catch (Exception e)
            {
                return null;
            }

        }
        //显示部门树形机构表
        private void BuildDepartList_inter(TreeListNode parent,List<TreeListNode> list)
        {
            List<Depart_Archi> Childs = DA.getDepart_Childs(parent.text); 
            foreach(Depart_Archi item in Childs)
            {
                TreeListNode mn = new TreeListNode();
                mn.text = item.Depart_Name;
                mn.id = item.Depart_Id;
                if (DA.getDepart_Childs(item.Depart_Id).Count==0) mn.selectable = true;
                parent.nodes.Add(mn);
                if (parent.text=="root") list.Add(mn);
                BuildDepartList_inter(mn, list);
            }
        }
        public  List<TreeListNode> BuildDepartList()
        {
            Depart_Archi root = GetRootTree();
            TreeListNode rnode=new TreeListNode();
           
            rnode.text= root.Depart_Name;
            rnode.selectable=false;
          
            List<TreeListNode> list = new List<TreeListNode>();
            BuildDepartList_inter(rnode, list);
            return list;
        }
      
        //显示专业部门树形结构表
        private void BuildSpecialtyList_inter(TreeListNode parent, List<TreeListNode> list)
        {
            List<Speciaty_Info> Childs =SD.getSepciaty_Childs(parent.text);
            foreach (Speciaty_Info item in Childs)
            {
                TreeListNode mn = new TreeListNode();
                mn.text = item.Specialty_Name;
                mn.id = item.Specialty_Id;
                if (SD.getSepciaty_Childs(item.Specialty_Id).Count == 0) mn.selectable = true;
                parent.nodes.Add(mn);
                if (parent.text == "root") list.Add(mn);
                BuildSpecialtyList_inter(mn, list);
            }
        }
        public List<TreeListNode> BuildSpeciatyList()
        {
           
            TreeListNode rnode = new TreeListNode();

            rnode.text = "root";
            rnode.selectable = false;

            List<TreeListNode> list = new List<TreeListNode>();
            BuildSpecialtyList_inter(rnode, list);
            return list;
        }


        //显示系统菜单部门树形结构表
        private void BuildMenuList_inter(TreeListNode parent, List<TreeListNode> list,List<Menu> hasMenus)
        {   
            List<Menu> Childs = MD.GetChildMenu(parent.text);
            foreach (Menu item in Childs)
            {
                TreeListNode mn = new TreeListNode();
                mn.text = item.Menu_Name;
                mn.id = item.Menu_Id;
                 if (MD.GetChildMenu(item.Menu_Id).Count == 0) mn.selectable = true;
                 if (hasMenus.Where(s => s.Menu_Id == item.Menu_Id).Count() > 0) mn.state.selected=true;
                 
                parent.nodes.Add(mn);
                if (parent.text == "root") list.Add(mn);
                BuildMenuList_inter(mn, list,hasMenus);
            }
        }
        public List<TreeListNode> BuildMenuList(string Role_ids)
        {

            TreeListNode rnode = new TreeListNode();
            List<Menu> hasMenus = RD.getPerson_Role_Menus(Role_ids);

            rnode.text = "root";
            rnode.selectable = false;

            List<TreeListNode> list = new List<TreeListNode>();
            BuildMenuList_inter(rnode, list, hasMenus);
            return list;
        }


    }
}
