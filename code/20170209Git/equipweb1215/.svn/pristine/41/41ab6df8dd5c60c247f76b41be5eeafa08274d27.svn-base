using EquipModel.Entities;
using FlowEngine;
using FlowEngine.UserInterface;
using WebApp.Models;
using WebApp.Models.User;
using System;
using System.Collections.Generic;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using EquipModel.Context;
using System.Text;
using EquipBLL.AdminManagment;
using System.IO;

namespace WebApp.Controllers
{
    public class A13dot1Controller : Controller
    {
        //
        public class MainModel
        {
              public  string userName ;
              public   string missTime;
               public  int missIndex;
               public string miss_desc;
               public string miss_url;

           
        }
        public class HistroyModel
        {
            public int miss_wfe_Id;
            public string missStartName;
            public string missStartTime;
            public int missIndex;
            public string miss_LastStatusdesc;
            public string wfe_serial;
        }
        public class Index_Model
        {
           public  List<MainModel> Am;
            public List<HistroyModel> Hm;


        }
        public class CatalogModel
        {
            public UI_MISSION miModel;
            public List<string> MissTime;
            public List<string> MissUser;
        }
        public class WFDetail_Model
        {
            public List<UI_MISSION> ALLHistoryMiss;
            public List<string> MissTime;
            public List<string> MissUser;
        }
        public class ZzSubmitModel
        {
            public  string UserName;
            public string UserDepartment;
            public List<Equip_Archi> UserHasEquips;
        }
        // GET: /A13dot1/
        public ActionResult Index()
        {
            List<UI_MISSION> miss;
            //miss = CWFEngine.GetActiveMissions<Person_Info>(((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            miss = CWFEngine.GetActiveMissions<Person_Info>(((IObjectContextAdapter)(new EquipWebContext())).ObjectContext,"A13dot1",true);
           Index_Model listRecord = new Index_Model();
           listRecord.Am = new List<MainModel>();
            foreach(var item in miss)
            {
                MainModel o = new MainModel();
               
                int Miss_Id = CWFEngine.GetHistoryMissions(item.WE_Entity_Id).Last().Miss_Id;
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
                if (r.Count>0)
                {
                    o.userName = r["username"];
                    o.missTime = r["time"];
                }
                else
                {
                    o.userName = "";
                    o. missTime = "";
                }
                o.missIndex = miss.IndexOf(item) + 1;
               
               o.miss_desc = item.WE_Event_Desc;
               o.miss_url = item.Mission_Url;


               listRecord.Am.Add(o);

            }
            listRecord.Hm = new List<HistroyModel>();
            HistroyModel h;
            List<UI_WFEntity_Info> start_entities = CWFEngine.GetWFEntityByHistoryDone(t => t.Record_Info.Count(q => q.Re_Name == "username" && q.Re_Value == "fhp") > 0 && t.Miss_WFentity.WE_Wref.W_Name == "A13dot1");
            foreach (var item in start_entities)
            {
                h = new HistroyModel();
                List<UI_MISSION> AllHistoryMiss = CWFEngine.GetHistoryMissions(item.EntityID);
                int Miss_Id = AllHistoryMiss[0].Miss_Id;
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
                if (r.Count > 0)
                {
                    h.missStartName = r["username"];
                    h.missStartTime = r["time"];
                }
                else
                {
                    h.missStartName = "";
                   h.missStartTime = "";
                }
                h.missIndex = start_entities.IndexOf(item) + 1;
                h.wfe_serial = item.serial;
                UI_MISSION miss_last = AllHistoryMiss[AllHistoryMiss.Count()-1];
                
                h.miss_LastStatusdesc = miss_last.WE_Event_Desc;
                h.miss_wfe_Id = item.EntityID;
                listRecord.Hm.Add(h);
            }
            
            return View(listRecord);
            
        }
        // GET: /A13dot1/装置提报
        public ActionResult ZzSubmit(string wfe_id)
        {
            PersonManagment pm = new PersonManagment();
            ZzSubmitModel mm = new ZzSubmitModel();
            ViewBag.WF_NAME = wfe_id;
            mm.UserName = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            mm.UserDepartment = pm.Get_Person_DepartOfParent((Session["User"] as EquipModel.Entities.Person_Info).Person_Id).Depart_Name;
           mm.UserHasEquips= pm.Get_Person_Cj((Session["User"] as EquipModel.Entities.Person_Info).Person_Id);
           
           // mm.UserHasEquips = null;
            return View(mm);
        }

        public JsonResult Cj_Zzs(int cj_id)
        {
            EquipManagment pm = new EquipManagment();
            List<Equip_Archi> Zz = pm.getZzs_ofCj(cj_id);
            List<object> Zz_obj = new List<object>();
            foreach(var item in Zz)
            {
                object o = new
                {
                    Zz_Id = item.EA_Id,
                    Zz_Name = item.EA_Name

                };
            Zz_obj.Add(o);

            }
            return Json(Zz_obj.ToArray());

        }

        public JsonResult Zz_Equips(int Zz_id)
        {
            EquipManagment pm = new EquipManagment();
            List<Equip_Info> Equips_of_Zz = pm.getEquips_OfZz(Zz_id);
            List<object> Equip_obj = new List<object>();
            foreach (var item in Equips_of_Zz)
            {
                object o = new
                {
                    Equip_Id = item.Equip_Id,
                    Equip_GyCode = item.Equip_GyCode,
                   // Equip_Code=item.Equip_Code,
                  //  Equip_Type=item.Equip_Type,
                   // Equip_Specialty=item.Equip_Specialty
                };
                Equip_obj.Add(o);

            }
            return Json(Equip_obj.ToArray());

        }

        public JsonResult ListEquip_Info(int Equip_Id)
        {
            EquipManagment pm = new EquipManagment();
            Equip_Info EquipInfo_selected = pm.getEquip_Info(Equip_Id);
            List<object> Equip_obj = new List<object>();
          
                object o = new
                {
                    Equip_Code = EquipInfo_selected.Equip_Code,
                    Equip_Type = EquipInfo_selected.Equip_Type,
                    Equip_Specialty=EquipInfo_selected.Equip_Specialty
                };
                Equip_obj.Add(o);

           
            return Json(Equip_obj.ToArray());

        }

        // GET: /A13dot1/片区分类
        public ActionResult PqCatalog(string  wfe_id)
        {
           // UI_MISSION mi = CWFEngine.GetActiveMission<UserInfo>(wfe_id, ((IObjectContextAdapter)(new UserContext())).ObjectContext);
            CatalogModel cm = new CatalogModel();
            cm.miModel = CWFEngine.GetActiveMission<Person_Info>(int.Parse(wfe_id), ((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            cm.MissTime=new List<string>();
            cm.MissUser=new List<string>();
            string t;
            foreach(var item in CWFEngine.GetHistoryMissions(cm.miModel.WE_Entity_Id))
            {
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                t = r["username"];
                cm.MissUser.Add(t);
                 t = r["time"];
                cm.MissTime.Add(t);
            }
            ViewBag.curtime = DateTime.Now.ToString();
            ViewBag.curuser = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            ViewBag.WF_NAME = wfe_id;
            return View(cm);
        }

       
        // GET: /A13dot1/专业团队审核
        public ActionResult ZytdConfirm(string wfe_id)
        {
            CatalogModel cm = new CatalogModel();
            ViewBag.WF_NAME = wfe_id;
            cm.miModel = CWFEngine.GetActiveMission<Person_Info>(int.Parse(wfe_id), ((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            cm.MissTime = new List<string>();
            cm.MissUser = new List<string>();
            string t;
            foreach (var item in CWFEngine.GetHistoryMissions(cm.miModel.WE_Entity_Id))
            {
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                t = r["username"];
                cm.MissUser.Add(t);
                t = r["time"];
                cm.MissTime.Add(t);
            }
            ViewBag.curtime = DateTime.Now.ToString();
            ViewBag.curuser = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            return View(cm);
        }


        public ActionResult WorkFolw_Detail(string wfe_id)
        {
            WFDetail_Model cm = new WFDetail_Model();
            ViewBag.WF_NAME = wfe_id;

          /*  List<UI_MISSION> AllHistoryMiss = CWFEngine.GetHistoryMissions(item.EntityID);
            int Miss_Id = AllHistoryMiss[0].Miss_Id;
            IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(Miss_Id);
            if (r.Count > 0)
            {
                h.missStartName = r["username"];
                h.missStartTime = r["time"];
            }
            else
            {
                h.missStartName = "";
                h.missStartTime = "";
            }
            h.missIndex = start_entities.IndexOf(item) + 1;
            UI_MISSION miss_last = AllHistoryMiss[AllHistoryMiss.Count() - 1];

            h.miss_LastStatusdesc = miss_last.WE_Event_Desc;
            h.miss_wfe_Id = item.EntityID;
            listRecord.Hm.Add(h);*/

      
            cm.ALLHistoryMiss = CWFEngine.GetHistoryMissions(int.Parse(wfe_id));
            cm.MissTime = new List<string>();
            cm.MissUser = new List<string>();
            string t;
            foreach (var item in cm.ALLHistoryMiss)
            {
                IDictionary<string, string> r = CWFEngine.GetMissionRecordInfo(item.Miss_Id);
                if (r.Count > 0)
                {
                    t = r["username"];
                    cm.MissUser.Add(t);
                    t = r["time"];
                    cm.MissTime.Add(t);
                }
                else
                {
                    cm.MissUser.Add("");
                    cm.MissTime.Add("");
                }
            }
           
            return View(cm);
        }
        // GET: /A13dot1/跳转到其它模块--仅用于测试
        public ActionResult JumpToAx(string wfe_id)
        {

            ViewBag.WF_NAME = wfe_id;            
            UI_MISSION miModel = CWFEngine.GetActiveMission<Person_Info>(int.Parse(wfe_id), ((IObjectContextAdapter)(new EquipWebContext())).ObjectContext);
            ViewBag.MODULE_NAME = miModel.Miss_Params["temp_ModuleName"].ToString();//根据片区分类结果，得到跳转的模块名，并传参数
            return View(miModel);
        }

        public string submitsignal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                string flowname = item["Flow_Name"].ToString();
                //paras
                Dictionary<string, string> signal = new Dictionary<string, string>();
                signal["submit_user"] = item["submit_user"].ToString();
                signal["submit_done"] = "true";   
                signal["submit_time"] = item["submit_time"].ToString();
               // signal["submit_time"] = Encoding.Default.GetString(DateTime.ToString());
                signal["Cj_Name"] = item["Cj_Name"].ToString();
                signal["Zz_Name"] = item["Zz_Name"].ToString();              
                signal["Equip_GyCode"] = item["Equip_GyCode"].ToString();
                signal["Equip_Code"] = item["Equip_Code"].ToString();
                signal["Equip_Type"] = item["Equip_Type"].ToString();
                signal["Problem_Desc"] = item["Problem_Desc"].ToString();               
                //string  filename = Path.Combine(Request.MapPath("~/Upload"),item["Problem_DescFilePath"].ToString());
                signal["Problem_DescFilePath"] = item["Problem_DescFilePath"].ToString();
                signal["Zy_Type"] = item["Zy_Type"].ToString();
                signal["Zy_SubType"] = item["Zy_SubType"].ToString();
                //record
                Dictionary<string, string> record =  new Dictionary<string, string>();
                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                //submit
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);
            }
            catch (Exception e)
            {
                return "";
            }
            return ("/A13dot1/Index");
        }


      

        public string submitCatalog_signal(string json1)
        {
            try
            {
                JObject item = (JObject)JsonConvert.DeserializeObject(json1);
                Dictionary<string, string> signal = new Dictionary<string, string>();
                var flowname = item["Flow_Name"].ToString();
                signal["catlog_type"] = item["catlog_type"].ToString();

                if (item["catlog_type"].ToString() == "完好类" )
                {
                    signal["defect_level"] = item["defect_level"].ToString();
                  string temp_ModuleName = "A5dot1";
                   signal["temp_ModuleName"] = temp_ModuleName.ToString();
                    
                }
                else if (item["catlog_type"].ToString() == "隐患")
                {
                    signal["defect_level"] = item["defect_level"].ToString();
                    string temp_ModuleName = "A11dot2";
                   signal["temp_ModuleName"] = temp_ModuleName.ToString();
                }
                else if (item["catlog_type"].ToString() == "故障")
                {
                    signal["defect_level"] = item["defect_level"].ToString();
                    signal["fault_intensity"] = item["fault_intensity"].ToString();
                    string temp_ModuleName = "A13dot2";
                    signal["temp_ModuleName"] = temp_ModuleName.ToString();
                }


                Dictionary<string, string> record = new Dictionary<string, string>();


                record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
                record["time"] = DateTime.Now.ToString();
                CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);

            }
            catch (Exception e)
            { return ""; }
            return ("/A13dot1/Index");
        }

        public string submitZytdConfirm_signal(string json1)
        {
            JObject item = (JObject)JsonConvert.DeserializeObject(json1);
            string flowname = item["Flow_Name"].ToString();   
            Dictionary<string, string> signal = new Dictionary<string, string>();
            //new input paras
            signal["fault_intensity"] = item["fault_intensity"].ToString();            

            signal["Confirmed"] = "true";
            Dictionary<string, string> record = new Dictionary<string, string>();


            record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            record["time"] = DateTime.Now.ToString();
            CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);
            return ("/A13dot1/Index");
        }

        //test
        public string submitOtherModule_signal(string json1)
        {
            JObject item = (JObject)JsonConvert.DeserializeObject(json1);
            string flowname = item["Flow_Name"].ToString();
            Dictionary<string, string> signal = new Dictionary<string, string>();
            //new input paras
            string mname=item["module_name"].ToString();
            //signal["temp_ModuleName"] = "\"" + mname + "\"";
          
            if(mname.Contains("A5dot1"))
                signal["temp_A5dot1"] = "true";
            else if (mname.Contains("A11dot2"))
                signal["temp_A11dot2"] = "true";
            else if (mname.Contains("A13dot2"))
            {
                signal["temp_A13dot2"] = "true";
                //signal["module_name"] = "A8dot2";
               
            }
            else if (mname.Contains("A8dot2"))
                signal["temp_A18dot2"] = "true";

            Dictionary<string, string> record = new Dictionary<string, string>();


            record["username"] = (Session["User"] as EquipModel.Entities.Person_Info).Person_Name;
            record["time"] = DateTime.Now.ToString();
           
            CWFEngine.SubmitSignal(Convert.ToInt32(flowname), signal,record);
            return ("/A13dot1/Index");
        }

        public object o { get; set; }

        [HttpPost]
        public JsonResult Upload(HttpPostedFileBase file)
        {

            if (file.ContentLength == 0)
            {

                return Json(new{message="没有文件"}); 

            }

            var fileName = Path.Combine(Request.MapPath("~/Upload"), Path.GetFileName(file.FileName));

            try
            {

                file.SaveAs(fileName);
                var FileSize = (file.ContentLength * 1.0 / 1024).ToString("0.00");
                Dictionary<string,string> r =new Dictionary<string,string>();
                r.Add("message", "上传成功");
                r.Add("fileName", file.FileName);
                r.Add("fileSize", FileSize);


                return Json(r);
            }
            catch
            {

                return Json(new{message="上传失败"});

            }
           

        }

        public ActionResult DelAttachment(string file)
        {
            try
            {

                string filePath = Path.Combine(Request.MapPath("~/Upload"), file);
                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                    return Json(new { status = "success" });
                }
                return Json(new { status = "false", message = "附件删除失败!" });
            }
            catch (Exception ex)
            {
                return Json(new { status = "false", message = "附件删除失败!" });
            }
        }
    }
}