using EquipDAL.Interface;
using EquipModel.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EquipDAL.Implement
{
    public class Person_Infos : BaseDAO,IPerson_Infos
    {

        public Person_Info GetPerson_info(int id)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    return db.Persons.Where(a => a.Person_Id == id).First();
                }
            }
            catch (Exception e)
            { return null; }
        }
       public  Person_Info GetPerson_info(string Person_Name)
        {
            try { 
            using (var db = base.NewDB())
            {
                return db.Persons.Where(a => a.Person_Name == Person_Name ).First();
            }
                }
           catch(Exception e)
            { return null; }
       }

       public  List<Role_Info> GetPerson_Roles(int id)
       {
           using (var db = base.NewDB())
           {
               var P= db.Persons.Where(a => a.Person_Id ==id ).First();
               return P.Person_roles.ToList();
           }

           
        }
       public List<Equip_Archi> getEA_of_Person(int Person_Id)
       {
           using (var db = base.NewDB())
           {
               try
               {
                   //Equip_Archi EA = new Equip_Archi();
                   Equip_Archi EA;
                   List<Equip_Archi> EA_list = new List<Equip_Archi>();
                   var EA_Set = db.EArchis.Where(a => a.EA_Title == "车间" && a.EA_Childs.Where(s => s.Equips_Belong.Where(t => t.Equip_Manager.Where(b => b.Person_Id == Person_Id).Count() > 0).Count() > 0).Count() > 0);
                   foreach (var item in EA_Set)
                   {
                       EA = new Equip_Archi();
                       EA.EA_Id = item.EA_Id;
                       EA.EA_Name = item.EA_Name;
                       EA.EA_Code = item.EA_Code;
                       EA.EA_Title = item.EA_Title;
                       EA_list.Add(EA);
                   }
                   return EA_list;
               }
               catch { return null; }
           }


       }
        public List<Equip_Info> GetPerson_Equips(int id)
        {
            using (var db = base.NewDB())
            {
                var P = db.Persons.Where(a => a.Person_Id == id).First();
                return P.Person_Equips.ToList();
            }
        
        }

       public  Depart_Archi GetPerson_Depart(int id)
        {   using (var db = base.NewDB())
            {
            var P = db.Persons.Where(a => a.Person_Id == id).First();
            return P.Dept_Belong;
           }
        }

       public bool AddRole(int Person_id, int Role_id)
       {
           using (var db = base.NewDB())
           {
               try
               {
                   var P = db.Persons.Where(a => a.Person_Id == Person_id).First();
                   var PR = db.Roles.Where(a => a.Role_Id == Role_id).First();
                   P.Person_roles.Add(PR);
                   db.SaveChanges();
                   return true;
               }
               catch
               {
                   return false;
               }
           }

       }
       public bool AddEquip(int Person_id, int Equip_id)
       {
           using (var db = base.NewDB())
           {
               try
               {
                   var P = db.Persons.Where(a => a.Person_Id == Person_id).First();
                   var E= db.Equips.Where(a => a.Equip_Id == Equip_id).First();
                   P.Person_Equips.Add(E);
                   db.SaveChanges();
                   return true;
               }
               catch
               {
                   return false;
               }
           }

       }
       public  bool AddPerson_info(Person_Info New_Person)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    db.Persons.Add(New_Person);
                     db.SaveChanges();
                    return true;
                }
              }
                catch
                {
                    return false;
                }
             
           
        
        }

        public bool Person_LinkRole(string Person_name,int Role_id)
       {
           try
           {
               using (var db = base.NewDB())
               {
                  var p= db.Persons.Where(s=>s.Person_Name==Person_name).First();
                   var r=db.Roles.Where(s=>s.Role_Id==Role_id).First();
                   p.Person_roles.Add(r);
                   db.SaveChanges();
                   return true;
               }
           }
           catch
           {
               return false;
           }
             
       }

        public bool Person_LinkDepart(string Person_name, int Depart_id)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    var p = db.Persons.Where(s => s.Person_Name == Person_name).First();
                    var r = db.Department.Where(s => s.Depart_Id == Depart_id).First();
                    p.Dept_Belong = r;
                    db.SaveChanges();
                    return true;
                }
            }
            catch
            {
                return false;
            }

        }

        public bool Person_LinkSpeciaties(string Person_name, List<int> Speciaty_IDs)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    var p = db.Persons.Where(s => s.Person_Name == Person_name).First();
                   
                    foreach (var item in Speciaty_IDs)
                    {
                       Speciaty_Info  r = db.Specialties.Where(s => s.Specialty_Id == item).First();
                        p.Person_specialties.Add(r);
                    }
                    db.SaveChanges();
                    return true;
                }
            }
            catch
            {
                return false;
            }

        }
        public bool Person_LinkEquip(string Person_name,int Depart_id, List<int> Speciaty_IDs)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    var p = db.Persons.Where(s => s.Person_Name == Person_name).First();

                    foreach (var item in Speciaty_IDs)
                    {   Speciaty_Info  r = db.Specialties.Where(s => s.Specialty_Id == item).First();
                    List<Equip_Info> e = db.Equips.Where(s => s.Equip_Specialty == r.Speciaty_Parent.Specialty_Name && s.Equip_PhaseB == r.Specialty_Name).ToList();
                    foreach (var eitem in e)
                    { p.Person_Equips.Add(eitem); }
                    }
                    db.SaveChanges();
                    return true;
                }
            }
            catch
            {
                return false;
            }

        }

        public bool Person_LinkMenus(string Person_name, List<int> Menu_IDs)
        {
            try
            {
                using (var db = base.NewDB())
                {
                    var p = db.Persons.Where(s => s.Person_Name == Person_name).First();

                    foreach (var item in Menu_IDs)
                    {
                        Menu r = db.Sys_Menus.Where(s => s.Menu_Id == item).First();
                        p.Person_Menus.Add(r);
                    }
                    db.SaveChanges();
                    return true;
                }
            }
            catch
            {
                return false;
            }

        }

       public  bool DeletePerson_info(int id) 
        {
            using (var db = base.NewDB())
            {
                try
                {
                    var P = db.Persons.Where(a => a.Person_Id == id).First();
                    if (P == null)
                        return false;
                    else
                    {
                        P.Person_roles.Clear();
                        db.Persons.Remove(P);
                        db.SaveChanges();
                        return true;

                    }
                }
                catch { return false; }
            }
        
        }

       public  bool ModifyPerson_info(int id, Person_Info New_Person)
        {
            using (var db = base.NewDB())
            {
                try
                {
                    var P = db.Persons.Where(a => a.Person_Id == id).First();
                    if (P == null)
                        return false;
                    else
                    {
                        P.Person_Name=New_Person.Person_Name;
                        P.Person_Pwd = New_Person.Person_Pwd;
                        P.Person_tel = New_Person.Person_tel;
                        P.Person_mail = New_Person.Person_mail;
                        db.SaveChanges();
                        return true;

                    }
                }
                catch { return false; }
            }
        
        }
    }
   
}
