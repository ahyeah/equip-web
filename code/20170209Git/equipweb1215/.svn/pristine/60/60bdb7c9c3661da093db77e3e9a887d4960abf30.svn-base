///////////////////////////////////////////////////////////
//  CParam.cs
//  Implementation of the Class CParam
//  Generated by Enterprise Architect
//  Created on:      26-10月-2015 9:46:30
//  Original author: chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FlowEngine;
using System.Xml;
using System.Diagnostics;
namespace FlowEngine.Param {
	/// <summary>
	/// 参数，即工作流的业务数据
	/// </summary>
	public class CParam : IXMLEntity {

		/// <summary>
		/// 变量描述
		/// </summary>
		private string m_description = "";
		/// <summary>
		/// 变量名称
		/// </summary>
		private string m_name = "";
		/// <summary>
		/// 变量类型：string, int, bool, float
		/// </summary>
		private string m_type = "";
		/// <summary>
		/// 变量值
		/// </summary>
		private object m_value;
		/// <summary>
		/// 记录哪些事件（Event）需要对该变量进行处理
		/// </summary>
		private List<string> m_linkEventsName = new List<string>();

		public CParam(){

		}

		~CParam(){

		}

		/// <summary>
		/// 变量描述
		/// </summary>
		public string description{
			get{
				return m_description;
			}
            set{
                m_description = value;
            }
		}

		/// <summary>
		/// 解析XML元素
		/// </summary>
		/// <param name="xmlNode"></param>
		public void InstFromXmlNode(XmlNode xmlNode){
            //1. 判断xmlNode类型
            if (xmlNode.Name != "param")
                return;

            //2. 设置Param的属性
            m_name = xmlNode.Attributes["name"].Value;
            m_description = xmlNode.Attributes["desc"].Value;
            m_type = xmlNode.Attributes["type"].Value;
            if (xmlNode.Attributes["value"] != null)
                value = xmlNode.Attributes["value"].Value;

            //3. 解析LinkEvents
            XmlNode linkevents = xmlNode.SelectSingleNode("linkevents");
            foreach(XmlNode lexn in linkevents.ChildNodes)
            {
                if (lexn.Name == "linkevent")
                {
                    m_linkEventsName.Add(lexn.InnerText);
                }
            }

            //4. 根据type设定默认值
            SetInitValue();
		}

		/// <summary>
		/// 变量名称
		/// </summary>
		public string name{
			get{
				return m_name;
			}
            set {
                m_name = value;
            }
		}

		/// <summary>
		/// 变量类型
		/// </summary>
		public string type{
			get{
				return m_type;
			}
            set{
                m_type = value;
            }
		}

		/// <summary>
		/// 变量值
		/// </summary>
		public object value{
			get{
				return m_value;
			}
			set{				
                switch (m_type)
                {
                    case "string":
                        m_value = value.ToString();
                        break;

                    case "int":
                        m_value = Convert.ToInt32(value);
                        break;

                    case "bool":
                        m_value = Convert.ToBoolean(value);
                        break;

                    case "float":
                        m_value = Convert.ToDouble(value);
                        break;

                    default:
                        throw new Exception("Unkown Param type");

                }
			}
		}

        public object value1
        {
            get
            {
                if (m_type == "string")
                    return "\"" + m_value + "\"";
                else
                    return m_value;
            }            
        }

		/// <summary>
		/// 反解析到XML元素
		/// </summary>
		public XmlNode WriteToXmlNode(){

            XmlDocument xd = new XmlDocument();
            //1. 创建Param节点
            XmlElement paramXe = xd.CreateElement("param");

            //2. 反解析Param属性
            paramXe.SetAttribute("name", m_name);
            paramXe.SetAttribute("desc", m_description);
            paramXe.SetAttribute("type", m_type);
            paramXe.SetAttribute("value", Convert.ToString(m_value));
            if (m_type == "string")
                paramXe.SetAttribute("value", (string)m_value);

            //3. 反解析LinkEvents
            XmlElement lesxe = xd.CreateElement("linkevents");
            foreach(string en in m_linkEventsName)
            {
                XmlElement lexe = xd.CreateElement("linkevent");
                lexe.InnerText = en;
                lesxe.AppendChild(lexe);
            }
            paramXe.AppendChild(lesxe);
            return paramXe;
		}

		/// <summary>
		/// 记录哪些事件（Event）需要对该变量进行处理
		/// </summary>
		public List<string> linkEvents{
			get{
				return m_linkEventsName;
			}
		}

		/// <summary>
		/// 根据变量类型设置初始值
		/// </summary>
		private void SetInitValue(){
            if (m_value != null)
                return;
            try
            {
                switch(m_type)
                {
                    case "string":
                        m_value = "";
                        break;

                    case "int":
                        m_value = 0;
                        break;

                    case "bool":
                        m_value = false;
                        break;

                    case "float":
                        m_value = 1.0;
                        break;

                    default:
                        throw new Exception("Unkown Param type");
                        
                }
            }
            catch(Exception e)
            {
                Trace.WriteLine(e.Message);
            }
		}

		/// <summary>
		/// 监测值value是否可以设置为该变量的值
		/// </summary>
		/// <param name="value"></param>
		public bool ValueTest(string value){
            try
            {
                switch(m_type)
                {  
                    case "string":
                        Convert.ToString(value);
                        break;

                    case "int":
                        Convert.ToInt32(value);
                        break;

                    case "bool":
                        Convert.ToBoolean(value);
                        break;

                    case "float":
                        Convert.ToDouble(value);
                        break;

                    default:
                        throw new Exception("Unkown Param type");
                }
            }
            catch
            {
                Trace.WriteLine(value + " can't convert to " + m_type);
                return false;
            }
            return true;
		}		

	}//end CParam

}//end namespace Param