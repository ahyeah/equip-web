using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;

namespace FlowDesigner.ConfigItems
{
    public class ConfigFlow : ConfigItem
    {
        [CategoryAttribute("流程属性")]
        public ConfigEvent Start {
            get
            {
                return start_event;
            }
            set {
                start_event = value;
                Rectangle SItem = (Rectangle)start_event.GetShowItem();

                Point pt = start_event.GetShowItem().TransformToVisual(Window.GetWindow(SItem.Parent)).Transform(new Point(150, 0));
                
                GeometryConverter gc = new GeometryConverter();
                (Show_item as Path).Data = (Geometry)gc.ConvertFromString("M " + pt.X + "," + pt.Y + " 500, 100");

            }
        }
        [CategoryAttribute("流程属性")]
        public ConfigEvent End { get; set; }


        private ConfigEvent start_event = null;
        private Point start_pt = new Point(); 
        public ConfigFlow()
        {
            Show_item = new Path
            {
                StrokeThickness = 3,
                Stroke = new SolidColorBrush(Color.FromRgb(128, 128, 128))
            };
        }
        
        public void Connect()
        {

        }

        protected override void NameChanged()
        {
            throw new NotImplementedException();
        }

        protected override void DescChanged()
        {
            throw new NotImplementedException();
        }

        protected override void OnMouseMove(object sender, System.Windows.Input.MouseEventArgs e)
        {
            throw new NotImplementedException();
        }

        public override void SetPos(int x, int y)
        {
            throw new NotImplementedException();
        }

        public override void Selected()
        {
            throw new NotImplementedException();
        }

        public override void UnSelect()
        {
            throw new NotImplementedException();
        }
    }
}
