///////////////////////////////////////////////////////////
//  WorkFlows.cs
//  Implementation of the Class WorkFlows
//  Generated by Enterprise Architect
//  Created on:      13-11月-2015 14:52:16
//  Original author: Chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using System.IO;
using FlowEngine.Modals;



namespace FlowEngine.DAL {
	public class WorkFlows : BaseDAO {

		public WorkFlows() {

		}

		~WorkFlows(){

		}

		/// <summary>
		/// 获得数据库中所以的工作流定义
		/// </summary>
		public List<WorkFlow_Define> GetAllWorkFlows(){

			using(var db = base.NewDB())
            {
                return db.workflow_define.ToList();
            }
		}		

		/// <summary>
		/// 获得wf_name的工作流的所有实例
		/// </summary>
		/// <param name="wf_id"></param>
		public List<WorkFlow_Entity> GetWorkFlowEntities(int wf_id){

            using (var db = base.NewDB())
            {
                return db.workflow_entities.Where(a => a.WE_Wref.W_ID == wf_id).ToList();
            }
		}

        /// <summary>
        /// 获得处于Active状态的工作流实体
        /// </summary>
        /// <param name="wf_id"></param>
        public List<WorkFlow_Entity> GetActiveWorkFlowEntities(string Entity_name)
        {
            //&& a.WE_Wref.W_Name == "A13dot1"
            using (var db = base.NewDB())
            {   if (Entity_name=="ALL")
                return db.workflow_entities.Where(a => a.WE_Status == WE_STATUS.ACTIVE ).ToList();
                else
                return db.workflow_entities.Where(a => a.WE_Status == WE_STATUS.ACTIVE && a.WE_Wref.W_Name == Entity_name).ToList();
            }
        }

        /// <summary>
        /// 获得工作流实体的名称
        /// </summary>
        /// <param name="wf_id"></param>
        public string GetWorkFlowEntityName(int wfe_id)
        {

            using (var db = base.NewDB())
            {
                WorkFlow_Entity we = db.workflow_entities.Where(a => a.WE_Id == wfe_id).First();
                if (we == null)
                    return "";

                return we.WE_Wref.W_Name;
            }
        }

        /// <summary>
        /// 获得工作流实体的描述信息
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public string GetWorkFlowEntityDesc(int wfe_id)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity we = db.workflow_entities.Where(a => a.WE_Id == wfe_id).First();
                if (we == null)
                    return "";

                return we.WE_Wref.W_Attribution;
            }
        }

		/// <summary>
		/// 依据工作流实体id查找工作流实体
		/// </summary>
		/// <param name="we_id"></param>
		public WorkFlow_Entity GetWorkFlowEntity(int we_id){

            using (var db = base.NewDB())
            {
                return db.workflow_entities.Where(a => a.WE_Id == we_id).First();
            }
		}

        public WorkFlow_Define GetWorkFlowDefine(string wf_name)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Define wd = db.workflow_define.Where(s => s.W_Name == wf_name).First();
                return wd;
            }
        }

        public bool SaveWorkFlowEntity(WorkFlow_Entity we)
        {
            using (var db = base.NewDB())
            {
                var wfe = db.workflow_entities.Where(a => a.WE_Id == we.WE_Id).First();
                wfe.WE_Status = we.WE_Status;
                wfe.WE_Binary = we.WE_Binary;
                if (db.SaveChanges() >= 1)
                    return true;
            }
            return false;
        }

        public bool AddWorkEntity(string wfName, WorkFlow_Entity we)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Define wd = db.workflow_define.Where(s => s.W_Name == wfName).First();

                //对WorkFlow_Entity编号的处理
                string perFix = DateTime.Now.ToString("yyyyMM");
                WorkFlow_Entity we_Ser = db.workflow_entities.Where(s => s.WE_Ser.StartsWith(perFix)).OrderBy(s => s.WE_Ser).Last();
                if (we_Ser == null)
                    we.WE_Ser = perFix + "00001";
                else
                {
                    we.WE_Ser = perFix + (Convert.ToInt64(we_Ser.WE_Ser) + 1).ToString();
                }

                if (wd == null)
                    return false;

                wd.W_Wentities.Add(we);
                return (db.SaveChanges() != 0);
            }
        }

        /// <summary>
        /// 获得任务实体的第一任务
        /// </summary>
        /// <param name="wfEntityId"></param>
        /// <returns></returns>
        public Mission GetWFEntityFirstMission(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe == null)
                    return null;

                return wfe.Process_Info.Where(s => s.pre_Mission == null).First();                
            }
        }

        /// <summary>
        /// 获得任务实体的最后一个任务
        /// </summary>
        /// <param name="wfEntityId"></param>
        /// <returns></returns>
        public Mission GetWFEntityLastMission(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe == null)
                    return null;

                return wfe.Process_Info.Where(s => s.next_Mission.Count == 0).First();
            }
        }

        /// <summary>
        /// 获得任务实体的所有已执行完的任务，以任务的顺序排列
        /// </summary>
        /// <param name="wfEntityId"></param>
        /// <returns></returns>
        public List<Mission> GetWFEntityMissions(int wfEntityId)
        {
            using (var db = base.NewDB())
            {
                List<Mission> missions = new List<Mission>();

                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();

                if (wfe != null)
                {
                    Mission miss = wfe.Process_Info.Where(s => s.pre_Mission == null).First();
                    if (miss != null)
                    {
                        missions.Add(miss);
                                                
                        while(miss.next_Mission.Count != 0)
                        {
                            missions.Add(miss.next_Mission.First());
                            miss = (Mission)miss.next_Mission.First();
                        }
                    }
                }

                return missions;
            }
        }

        /// <summary>
        /// 添加一条任务记录到数据库
        /// </summary>
        /// <param name="wfEntityId">工作流实体的ID</param>
        /// <param name="miss">新任务</param>        
        /// <returns>操作成功返回true,否则返回false</returns>
        public bool AddMissionRecord(int wfEntityId, Mission miss)
        {
            using (var db = base.NewDB())
            {
                //查找wfEntityId的工作流实体
                WorkFlow_Entity wfe = db.workflow_entities.Where(s => s.WE_Id == wfEntityId).First();
                if (wfe == null)
                    return false;
                 
                if (wfe.Process_Info.Count == 0)
                {
                    miss.next_Mission = null;
                    miss.pre_Mission = null;
                    wfe.Process_Info.Add(miss);
                }
                else
                {
                    Mission last = wfe.Process_Info.Where(s => s.next_Mission.Count == 0).First();
                    miss.pre_Mission = last;
                    miss.Miss_WFentity = wfe;
                    last.next_Mission.Add(miss);
                }
                return (db.SaveChanges() != 0);
            }            
        }

        /// <summary>
        /// 为一个任务添加参数
        /// </summary>
        /// <param name="missId">任务的ID</param>
        /// <param name="pars">参数列表</param>
        /// <returns>操作成功返回true, 否则返回false</returns>
        public bool LinkParamsToMiss(int missId, List<Mission_Param> pars)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();
                if (miss == null)
                    return false;

                foreach(Mission_Param mpar in pars)
                {
                    miss.Params_Info.Add(mpar);
                }
                return (db.SaveChanges() != 0);
            }
        }

        /// <summary>
        /// 为一个任务添加Record信息
        /// </summary>
        /// <param name="missId">任务的ID</param>
        /// <param name="pRecords">Record信息</param>
        /// <returns>操作成功返回true, 否则返回false</returns>
        public bool LinkRecordInfoToMiss(int missId, List<Process_Record> pRecords)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();
                if (miss == null)
                    return false;

                foreach (Process_Record pr in pRecords)
                {
                    miss.Record_Info.Add(pr);
                }
                return (db.SaveChanges() != 0);
            }
        }

        /// <summary>
        /// 获取某一任务的Record信息
        /// </summary>
        /// <param name="missId">任务的ID</param>
        /// <returns>Mission的Record列表</returns>
        public List<Process_Record> GetMissionRecordInfo(int missId)
        {            
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.Record_Info.ToList();
            }
            
        }

        /// <summary>
        /// 获取某一任务的参数
        /// </summary>
        /// <param name="missId"></param>
        /// <returns>Mission的参数列表</returns>
        public List<Mission_Param> GetMissParams(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.Params_Info.ToList();
            }
        }

        /// <summary>
        /// 获取某一个任务的前一个任务
        /// </summary>
        /// <param name="missId"></param>
        /// <returns></returns>
        public Mission GetPreMission(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.pre_Mission;
            }
        }

        /// <summary>
        /// 获取某一个任务的前一个任务
        /// </summary>
        /// <param name="missId"></param>
        /// <returns></returns>
        public Mission GetNextMission(int missId)
        {
            using (var db = base.NewDB())
            {
                Mission miss = db.mission.Where(s => s.Miss_Id == missId).First();

                if (miss == null)
                    return null;

                return miss.next_Mission.First();
            }
        }

        public List<WorkFlow_Entity> GetWFEntityByConditon(Func<WorkFlow_Entity, bool> condition)
        {
            using (var db = base.NewDB())
            {
                try
                {
                    db.workflow_entities.Where(s => s.Process_Info.Count(t => t.Miss_Id == 1) == 0);
                    return db.workflow_entities.Where(condition).ToList();
                }
                catch(Exception e)
                {
                    return null;
                }
            }
        }

        /// <summary>
        /// 获得某个工作流完成需要的步骤
        /// </summary>
        /// <param name="wf_name"></param>
        /// <returns></returns>
        public int GetWFAvgSteps(string wf_name)
        {
            using (var db = base.NewDB())
            {
                var workflow = db.workflow_define.Where(s => s.W_Name == wf_name).First();
                var wfEntities = workflow.W_Wentities.Where(s => s.WE_Status == WE_STATUS.DONE);
                if (wfEntities.ToList().Count == 0)
                    return 0;

                double steps = wfEntities.Average(s => s.Process_Info.Count);
                return (int)steps;
            }
        }

        /// <summary>
        /// 获得某一工作流实体已执行了多少步
        /// </summary>
        /// <param name="wfe_id"></param>
        /// <returns></returns>
        public int GetWFEntityFinishSteps(int wfe_id)
        {
            using (var db = base.NewDB())
            {
                var wfe = db.workflow_entities.Where(s => s.WE_Id == wfe_id).First();
                if (wfe != null)
                    return wfe.Process_Info.Count;
                else
                    return 0;
            }
        }

	}//end WorkFlows

}//end namespace FlowEngine.DAL