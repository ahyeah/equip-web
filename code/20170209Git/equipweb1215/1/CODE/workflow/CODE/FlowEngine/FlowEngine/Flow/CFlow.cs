///////////////////////////////////////////////////////////
//  CFlow.cs
//  Implementation of the Class CFlow
//  Generated by Enterprise Architect
//  Created on:      28-10月-2015 13:58:42
//  Original author: chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FlowEngine;
using FlowEngine.Flow;
using System.Xml;
namespace FlowEngine.Flow {
	public class CFlow : IXMLEntity, IFlow {

		/// <summary>
		/// 流（Flow）的目的事件（Event）
		/// </summary>
		private string m_DestEvent = "";
		/// <summary>
		/// 流程（Flow）的条件表达式
		/// </summary>
		private string m_expression = "";
		/// <summary>
		/// 流（Flow）的源事件
		/// </summary>
		private string m_SourceEvent = "";
		
		/// <summary>
		/// 用以解析、计算流的条件表达式
		/// </summary>
        private FlowEngine.Flow.CExpressionEvaluator m_ExpressionEvaluator;

        private bool m_serial;
        /// 
        /// <param name="pt">pt用以传递参数表</param>
		public CFlow(FlowEngine.Param.CParamTable pt, bool serial = true){
            m_ExpressionEvaluator = new CExpressionEvaluator(pt);
            m_serial = serial;
		}

		~CFlow(){

		}

		/// <summary>
		/// 获得/设置流程（Flow）的目的事件
		/// </summary>
		public string destination_event{
			get{
                return m_DestEvent;
            }
			set{
                m_DestEvent = value;
            }
		}

		/// <summary>
		/// 计算流（Flow）表达式的值
		/// 返回值：真假
		/// </summary>
		public bool Evaluate(){

            CSymbol v = m_ExpressionEvaluator.Evaluate();
            return Convert.ToBoolean(v.value);
		}

		/// <summary>
		/// 获取/设置流（Flow）表达式
		/// </summary>
		public string expression{
            get{
                return m_expression;
            }
            set{
                m_expression = value;
            }
		}

		/// <summary>
		/// 解析XML元素
		/// </summary>
		/// <param name="xmlNode"></param>
		public void InstFromXmlNode(XmlNode xmlNode){
            //1. 判断xmlNode是否为Flow节点
            if (xmlNode.Name != "flow")
                return;

            //2. 设置Flow对象的属性
            m_DestEvent = xmlNode.Attributes["destination"].Value;
            m_SourceEvent = xmlNode.Attributes["source"].Value;

            //3. 解析Flow的表达式
            m_expression = xmlNode.SelectSingleNode("condition").InnerText;
            //表达式对象处理
            m_ExpressionEvaluator.Parse(m_expression);
            m_ExpressionEvaluator.InfixToPostfix();
		}

        public void PrePase()
        {
            if (m_expression == "")
                return;

            //表达式对象处理
            m_ExpressionEvaluator.Parse(m_expression);
            m_ExpressionEvaluator.InfixToPostfix();
        }

		/// <summary>
		/// 获得/设置流程（Flow）的源事件（Event）的名称
		/// </summary>
		public string source_event{
			get{
                return m_SourceEvent;
            }
			set{
                m_SourceEvent = value;
            }
		}

		/// <summary>
		/// 反解析到XML元素
		/// </summary>
		public XmlNode WriteToXmlNode(){

            if (!m_serial)
                return null;

            XmlDocument doc = new XmlDocument();

            //1. 创建Flow节点
            XmlElement fn = doc.CreateElement("flow");

            //2. 设置Flow属性
            fn.SetAttribute("source", m_SourceEvent);
            fn.SetAttribute("destination", m_DestEvent);

            //3. 设置条件表达式
            XmlElement exp = doc.CreateElement("condition");
            exp.AppendChild(doc.CreateCDataSection(m_expression));
            fn.AppendChild(exp);

			return fn;
		}
	}//end CFlow

}//end namespace Flow