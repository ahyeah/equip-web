///////////////////////////////////////////////////////////
//  CStartEvent.cs
//  Implementation of the Class CStartEvent
//  Generated by Enterprise Architect
//  Created on:      26-10月-2015 9:46:30
//  Original author: chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FlowEngine.Event;
using FlowEngine;
using System.Xml;
using FlowEngine.DAL;
using System.Net;
using System.Diagnostics;
namespace FlowEngine.Event {
	public class CStartEvent : CEvent {

		public CStartEvent(CWorkFlow parent) : base(parent){

		}

		~CStartEvent(){

		}

		/// <summary>
		/// 解析XML元素
		/// </summary>
		/// <param name="xmlNode"></param>
		public override void InstFromXmlNode(XmlNode xmlNode){
            //1. 解析基类CEvent的成员
            base.InstFromXmlNode(xmlNode);

            //2. 解析StartEvent的成员
		}

		/// <summary>
		/// 反解析到XML元素
		/// </summary>
		public override XmlNode WriteToXmlNode(){

            //1. 反解析基类部分成员
            XmlNode xn = base.WriteToXmlNode();

            //2. 反解析StartEvent的成员
            XmlElement xe = (XmlElement)xn;
            xe.SetAttribute("type", "startevent");
            return xn;
		}

		/// <summary>
		/// 进入该事件（Event）
		/// </summary>
		/// <param name="strjson"></param>
		public override void EnterEvent(string strjson){
            //System.Web.HttpContext.Current.Response.Redirect("/Login/Index");
            if (beforeaction != "")
            {
                string strjson1 = "{param:'{";
                foreach (var par in m_beforeActionParams)
                {
                    string tmp = string.Format("{0}:\"{1}\",", par.Key, parselEventActionParams(par.Value));
                    strjson1 += tmp;
                }
                strjson1.TrimEnd(new char[] { ',' });
                strjson1 += "}'}";
                try
                {
                    byte[] bytes = Encoding.UTF8.GetBytes(strjson1);

                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(beforeaction);
                    request.ContentType = @"application/json";
                    request.Accept = "application/xml";
                    request.Method = "POST";
                    request.ContentLength = bytes.Length;

                    Stream postStream = request.GetRequestStream();
                    postStream.Write(bytes, 0, bytes.Length);
                    postStream.Dispose();

                    //结束动作函数返回值
                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream responseStream = response.GetResponseStream();
                    StreamReader sr = new StreamReader(responseStream, Encoding.UTF8);
                    //对返回结果进行处理
                    OpResutsfromAction(sr.ReadToEnd());

                }
                catch (Exception e)
                {
                    Trace.WriteLine("EnterEvent error:" + e.Message);
                    //return;
                }
            }
            base.UpdateCurrentEvent();
            m_timeout.RegTimeoutTimer(false);
		}

		/// <summary>
		/// 离开该事件（Event）
		/// </summary>
		/// <param name="strjson"></param>
		public override void LeaveEvent(string strjson){
            if (beforeaction != "")
            {
                string strjson1 = "{param:'{";
                foreach (var par in m_afterActionParams)
                {
                    string tmp = string.Format("{0}:\"{1}\",", par.Key, parselEventActionParams(par.Value));
                    strjson1 += tmp;
                }
                strjson1.TrimEnd(new char[] { ',' });
                strjson1 += "}'}";
                try
                {
                    byte[] bytes = Encoding.UTF8.GetBytes(strjson1);

                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(afteraction);
                    request.ContentType = @"application/json";
                    request.Accept = "application/xml";
                    request.Method = "POST";
                    request.ContentLength = bytes.Length;

                    Stream postStream = request.GetRequestStream();
                    postStream.Write(bytes, 0, bytes.Length);
                    postStream.Dispose();

                    //结束动作函数返回值
                    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                    Stream responseStream = response.GetResponseStream();
                    StreamReader sr = new StreamReader(responseStream, Encoding.UTF8);
                    //对返回结果进行处理
                    OpResutsfromAction(sr.ReadToEnd());

                }
                catch (Exception e)
                {
                    Trace.WriteLine("EnterEvent error:" + e.Message);
                    //return;
                }
            }
            //保存信息到数据库中
            base.InsertMissionToDB();
            m_timeout.UnregTimeoutTimer();
		}

	}//end CStartEvent

}//end namespace Event