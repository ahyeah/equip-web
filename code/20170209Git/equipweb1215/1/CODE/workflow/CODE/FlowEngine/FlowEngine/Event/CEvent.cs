///////////////////////////////////////////////////////////
//  CEvent.cs
//  Implementation of the Class CEvent
//  Generated by Enterprise Architect
//  Created on:      26-10月-2015 9:46:30
//  Original author: chenbin
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using FlowEngine.Event;
using System.Xml;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Diagnostics;
using FlowEngine.Param;
using FlowEngine.Authority;
using System.Data.Entity.Core.Objects;
using FlowEngine.DAL;
using FlowEngine.Modals;

namespace FlowEngine.Event {
	/// <summary>
	/// 各种事件（Event）的基类，提供它们相同的操作
	/// </summary>
	public abstract class CEvent : IXMLEntity, IEvent {

		/// <summary>
		/// 事件（Event）名称
		/// </summary>
		private string m_name = "";
		/// <summary>
		/// 事件（Event）的描述
		/// </summary>
		private string m_description = "";
		/// <summary>
		/// After Action: 离开事件（Event）首先执行的动作
		/// Action（动作）:对应于MVC的Controller
		/// 注意：After Action联系的Controller不建议设置成页面controller，否则会引起自动页面跳转
		/// </summary>
		private string m_afferAction = "";
        /// <summary>
        /// After Action 事件的参数
        /// </summary>
        protected Dictionary<string, string> m_afterActionParams = new Dictionary<string, string>();
		/// <summary>
		/// Before Action: 进入事件（Event）首先执行的动作
		/// Action（动作）:对应于MVC的Controller
		/// 注意：BeforAction联系的Controller不建议设置成页面controller，否则会引起自动页面跳转
		/// </summary>
		private string m_beforAction = "";
        /// <summary>
        /// Before Action 事件的参数
        /// </summary>
        protected Dictionary<string, string> m_beforeActionParams = new Dictionary<string, string>();
		/// <summary>
		/// Current Action: 事件（Event）的主动作
		/// Action（动作）:对应于MVC的Controller
		/// </summary>
		private string m_currentAction = "";
        /// <summary>
        /// 与Event相关联的参数
        /// </summary>
        protected Dictionary<string, CParam> m_params = new Dictionary<string, CParam>();
        protected Dictionary<string, string> m_paramsApp_res = new Dictionary<string, string>();
        /// <summary>
        /// 权限判定
        /// </summary>
        private CAuthority m_authority = new CAuthority();
        /// <summary>
        /// 所属工作流
        /// </summary>
        protected CWorkFlow m_parentWF;
        /// <summary>
        /// 超时控制
        /// </summary>
        protected CTimeOutProperty m_timeout;
        public CTimeOutProperty TimeOutProperty
        {
            get
            {
                return m_timeout;
            }
        }
        public CWorkFlow Parent 
        { 
            get { return m_parentWF; } 
        }

		public CEvent(CWorkFlow parent){
            m_parentWF = parent;
            m_timeout = new CTimeOutProperty(this);
		}

		~CEvent(){

		}
        /// <summary>
        /// 获取相关联的参数
        /// </summary>
        public Dictionary<string, CParam> paramlist
        {
            get{
                return m_params;
            }
        }

        public Dictionary<string, string> paramsApp_res
        {
            get
            {
                return m_paramsApp_res;
            }
        }
        

		/// <summary>
		/// 事件（Event）名称
		/// </summary>
		public string name{
			get{
				return m_name;
			}
            set
            {
                m_name = value;
            }
		}

		/// <summary>
		/// 解析XML元素
		/// </summary>
		/// <param name="xmlNode"></param>
		public virtual void InstFromXmlNode(XmlNode xmlNode){
            XmlElement xe = (XmlElement)xmlNode;

            //1. 判断xmlnode是否为“event”
            if (xmlNode.Name.ToLower() != "event")
                return;
            
            //2. 读取event的属性
            m_name = xmlNode.Attributes["name"].Value;
            m_description = xmlNode.Attributes["desc"].Value;

            //3. 读取Actions
            XmlNode actions = xe.SelectSingleNode("actions");
            XmlNode ba = actions.SelectSingleNode("beforeaction");
            XmlNode aa = actions.SelectSingleNode("afteraction");
            XmlNode ca = actions.SelectSingleNode("currentaction");

            
            m_currentAction = ca.InnerText;
            //3.1 afterAction
            m_afferAction = aa.SelectSingleNode("url").InnerText;
            m_afterActionParams.Clear();
            XmlNodeList aparams = ((XmlElement)(aa.SelectSingleNode("action_params"))).SelectNodes("param");
            foreach(var xnn in aparams)
            {
                m_afterActionParams[((XmlElement)xnn).GetAttribute("name")] = ((XmlElement)xnn).InnerText;
            }

            //3.2 beforeAction
            m_beforAction = ba.SelectSingleNode("url").InnerText;
            m_beforeActionParams.Clear();
            XmlNodeList bparams = ((XmlElement)(ba.SelectSingleNode("action_params"))).SelectNodes("param");
            foreach(var xnn in bparams)
            {
                m_beforeActionParams[((XmlElement)xnn).GetAttribute("name")] = ((XmlElement)xnn).InnerText;
            }
            

            //4. 读取权限
            XmlNode aut = xe.SelectSingleNode("authority");
            m_authority.InstFromXmlNode(aut);

            //5. 读取超时
            XmlNode to = xe.SelectSingleNode("timeout_setting");
            if (to != null)
                m_timeout.InstFromXmlNode(to);
		}

		/// <summary>
		/// 反解析到XML元素
		/// </summary>
		public virtual XmlNode WriteToXmlNode(){
            XmlDocument xd = new XmlDocument();
            //1. 创建Event节点
            XmlElement eventXe = xd.CreateElement("event");
            
            //2. 设置Event属性
            eventXe.SetAttribute("name", m_name);
            eventXe.SetAttribute("desc", m_description);

            //3. 设置动作(Actions)节点
            XmlElement actions = xd.CreateElement("actions");
            XmlElement ba = xd.CreateElement("beforeaction");
            XmlElement ca = xd.CreateElement("currentaction");
            XmlElement aa = xd.CreateElement("afteraction");

            
            ca.AppendChild(xd.CreateCDataSection(m_currentAction));
            //3.1 beforeAction
            XmlElement baurl = xd.CreateElement("url");
            baurl.AppendChild(xd.CreateCDataSection(m_beforAction));
            ba.AppendChild(baurl);
            XmlElement baparams = xd.CreateElement("action_params");
            foreach(var bp in m_beforeActionParams)
            {
                XmlElement pee = xd.CreateElement("param");
                pee.SetAttribute("name", bp.Key);
                pee.InnerText = bp.Value;
                baparams.AppendChild(pee);
            }
            ba.AppendChild(baparams);
            //3.2 afterAction
            XmlElement aaurl = xd.CreateElement("url");
            aaurl.AppendChild(xd.CreateCDataSection(m_afferAction));
            aa.AppendChild(aaurl);
            XmlElement aaparams = xd.CreateElement("action_params");
            foreach(var ap in m_afterActionParams)
            {
                XmlElement pee = xd.CreateElement("param");
                pee.SetAttribute("name", ap.Key);
                pee.InnerText = ap.Value;
                aaparams.AppendChild(pee);
            }
            aa.AppendChild(aaparams);
            

            actions.AppendChild(ba);
            actions.AppendChild(ca);
            actions.AppendChild(aa);

            eventXe.AppendChild(actions);
            //4. 设置权限节点
            XmlNode auts = m_authority.WriteToXmlNode();
            eventXe.AppendChild(xd.ImportNode(auts, true));
            
            //5.设置timeout节点
            XmlNode to = m_timeout.WriteToXmlNode();
            eventXe.AppendChild(xd.ImportNode(to, true));

            return eventXe;
		}

		/// <summary>
		/// 事件（Event）的描述
		/// </summary>
		public string description{
			get{
				return m_description;
			}
            set
            {
                m_description = value;
            }
		}

		/// <summary>
		/// After Action
		/// </summary>
		public string afteraction{
			get{
                return m_afferAction;
            }
			set{
                m_afferAction = value;
            }
		}

		/// <summary>
		/// Before Action
		/// </summary>
		public string beforeaction{
            get {
                return m_beforAction;
            }
            set {
                m_beforAction = value;
            }
		}

		/// <summary>
		/// 事件的主事件
		/// </summary>
		public virtual string currentaction{
			get{
                return m_currentAction;
            }
			set{
                m_currentAction = value;
            }
		}

		/// <summary>
		/// 进入该事件（Event）
		/// </summary>
		/// <param name="strjson"></param>
        public abstract void EnterEvent(string strjson);
        

		/// <summary>
		/// 离开该事件（Event）
		/// </summary>
		/// <param name="strjson"></param>
        public abstract void LeaveEvent(string strjson);

        /// <summary>
        /// 跟新与之相关的变量的值
        /// </summary>
        /// <param name="strjson"></param>
        /// <returns></returns>
        public virtual bool UpdateParams(string strjson)
        {
            JArray ja = (JArray)JsonConvert.DeserializeObject(strjson);
            //1. 判断传达的变量是否合法
            foreach (JObject jo in ja)
            {
                string parname = jo["name"].ToString();
                string parvalue = jo["value"].ToString();

                //检测变量量是否合法
                if (!m_params.ContainsKey(parname))
                    return false;

                //检测变量值是否合法
                if (!m_params[parname].ValueTest(parvalue))
                    return false;
            }

            //2. 将变量的值更新
            foreach (JObject jo in ja)
            {
                string parname = jo["name"].ToString();
                string parvalue = jo["value"].ToString();

                m_params[parname].value = parvalue;
            }

            return true;
        }
        
		/// <summary>
		/// 处理Action返回的结果
		/// strjon包含两个属性，即status，状态（OK, ERROR）;
		///                                         description, 描述
		/// </summary>
		/// <param name="strjon"></param>
		protected void OpResutsfromAction(string strjon){

            JObject jo = (JObject)JsonConvert.SerializeObject(strjon);

            Trace.WriteLine("status:" + jo["status"].ToString());
            Trace.WriteLine("description:" + jo["desc"].ToString());
		}

        /// <summary>
        /// 权限检查
        /// </summary>
        public bool CheckAuthority<T>(Dictionary<string, object> outer_paras, ObjectContext oc)
        {
            Dictionary<string, object> inter_params = new Dictionary<string, object>();
            foreach (var pa in m_params)
                inter_params[pa.Key] = pa.Value.value;

            return m_authority.CheckAuth<T>(inter_params, outer_paras, oc);
        }

        protected void InsertMissionToDB()
        {
            WorkFlows wfs = new WorkFlows();

            Mission mis = new Mission();
            mis.Miss_Name = this.name;
            mis.Miss_WFentity = null;
            mis.Miss_Desc = this.description;
            mis.Event_Name = this.name;
            mis.next_Mission = null;
            mis.pre_Mission = null;
            mis.Record_Info = null;
            try
            {
                wfs.AddMissionRecord(m_parentWF.EntityID, mis);
                List<Mission_Param> pars = new List<Mission_Param>();
                foreach(var pa in m_params)
                {
                    Mission_Param par = new Mission_Param();
                    par.Param_Name = pa.Value.name;
                    par.Param_Type = pa.Value.type;
                    par.Param_Value = Convert.ToString(pa.Value.value);
                    par.Param_Desc = pa.Value.description;
                    pars.Add(par);
                }
                wfs.LinkParamsToMiss(mis.Miss_Id, pars);
            }
            catch(Exception e)
            {
                return;
            }
        }

        /// <summary>
        /// 将当前任务更新到数据库CURR_Misson
        /// </summary>
        /// <param name="clearFlag"></param>
        protected void UpdateCurrentEvent(bool clearFlag = false)
        {
            CURR_Mission cur_mis = new CURR_Mission();

            cur_mis.After_Action = afteraction;
            cur_mis.Before_Action = beforeaction;
            cur_mis.Current_Action = currentaction;
            cur_mis.Miss_Desc = description;
            cur_mis.Miss_Name = name;

            //将内部变量的值预填充到权限认证字符串
            Dictionary<string, object> inter_params = new Dictionary<string, object>();
            foreach (var pa in m_params)
                inter_params[pa.Key] = pa.Value.value;

            cur_mis.Str_Authority = m_authority.FillParams(inter_params, null);
            
            try
            {
                WorkFlows wfs = new WorkFlows();
                if (clearFlag == true)
                    wfs.UpdateCurrentMission(m_parentWF.EntityID, null);
                else
                    wfs.UpdateCurrentMission(m_parentWF.EntityID, cur_mis);
            }
            catch(Exception e)
            {
                Trace.WriteLine("UpdateCurrentEvent error:" + e.Message);
            }
            
        }

        protected string parselEventActionParams(string param)
        {
            //如果param不是变量，则认为param是一个常量
            if (param[0] != '@')
                return param;
            else if (param.IndexOf("@ATT_") == 0)
            {
                string pName = param.Substring(5);
                string pValue = "";
                switch(pName)
                {
                    case "Entity_ID":
                        pValue =  m_parentWF.EntityID.ToString();
                        break;

                    case "Name":
                        pValue = m_parentWF.name;
                        break;

                    case "Description":
                        pValue = m_parentWF.description;
                        break;

                    case "Serial":
                        pValue = m_parentWF.EntitySerial;
                        break;

                    default:
                        pValue = "";
                        break;
                }
                return pValue;
            }
            else if (param.IndexOf("@PAR_") == 0)
            {
                string pName = param.Substring(5);
                string pValue = "";

                if (m_params.ContainsKey(pName))
                    pValue = Convert.ToString(m_params[pName].value);
                return pValue;
            }
            else
                return param;

        }

        public void RegTimeOut(bool bCreated)
        {
            m_timeout.RegTimeoutTimer(bCreated);
        }

        /// <summary>
        /// 获得权限字符串
        /// </summary>
        /// <returns></returns>
        public string GetAuthorityString()
        {
            return m_authority.auth_string;
        }

        /// <summary>
        /// 获得timeout属性
        /// </summary>
        /// <returns></returns>
        public CTimeOutProperty GetTimeOutProperty()
        {
            return m_timeout;
        }
	}//end CEvent

}//end namespace Event